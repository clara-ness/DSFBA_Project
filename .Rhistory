head(Data_cluster)
#prediction of cluster
#install.packages('parameters')
#install.packages('see')
library(see)
library(parameters)
res_kmeans <- cluster_analysis(data_1,
n = 3,
method = "kmeans")
predict(res_kmeans) # get clusters
plot(res_kmeans)
library(cluster)
sil <- silhouette(res_kmeans$cluster, dist(data_1))
fviz_silhouette(sil)
head(data_1)
View(data_1)
View(data_1)
data_1 <- GDP_diabetes_cal[,-(1:2),drop=FALSE]
model <- kmeans(data_1, centers = 3, nstart = 10)
# displays the class determined by
# the model for all observations:
model$cluster
# displays the class determined by
# the model for all observations:
model$cluster
Data_cluster <- data.frame(data_1,
cluster = as.factor(model$cluster)
)
Data_cluster <- data.frame(data_1,
cluster = as.factor(model$cluster)
)
head(Data_cluster)
library(parameters)
res_kmeans <- cluster_analysis(data_1,
n = 3,
method = "kmeans")
predict(res_kmeans) # get clusters
plot(res_kmeans)
library(cluster)
sil <- silhouette(res_kmeans$cluster, dist(data_1))
dim(data_1)
predict(res_kmeans) # get clusters
predict(res_kmeans) # get clusters
plot(res_kmeans)
myCluster <- data.frame(row.names(data_1), cluster = as.factor(cluster$model))
myCluster <- data.frame(row.names(data_1), cluster$model)
myCluster <- data.frame(row.names(data_1), model$cluster)
View(myCluster)
View(myCluster)
```{r}
rownames(GDP_diabetes_cal) <- c("AUT", "BEL", "BGR", "HRV", "CYP", "CZE", "DNK", "EST", "FIN", "FRA", "DEU","GRC", "HUN", "IRL", "ITA", "LVA", "LTU", "LUX", "MLT", "NLD", "POL", "PRT", "ROU", "SVK", "SVN", "ESP", "SWE", "GBR", "CHE")
data_1 <- GDP_diabetes_cal[,-(1:2),drop=FALSE]
model <- kmeans(data_1, centers = 3, nstart = 10)
# displays the class determined by
# the model for all observations:
model$cluster
# displays the class determined by
# the model for all observations:
model$cluster
Data_cluster <- data.frame(data_1,
cluster = as.factor(model$cluster)
)
Data_cluster <- data.frame(data_1,
cluster = as.factor(model$cluster)
)
head(Data_cluster)
#prediction of cluster
#install.packages('parameters')
#install.packages('see')
library(see)
library(parameters)
res_kmeans <- cluster_analysis(data_1,
n = 3,
method = "kmeans")
predict(res_kmeans) # get clusters
plot(res_kmeans)
myCluster <- data.frame(row.names(data_1), model$cluster)
View(myCluster)
View(myCluster)
row.names(data_1)
View(data_1)
View(data_1)
```{r}
rownames(GDP_diabetes_cal) <- c("AUT", "BEL", "BGR", "HRV", "CYP", "CZE", "DNK", "EST", "FIN", "FRA", "DEU","GRC", "HUN", "IRL", "ITA", "LVA", "LTU", "LUX", "MLT", "NLD", "POL", "PRT", "ROU", "SVK", "SVN", "ESP", "SWE", "GBR", "CHE")
data_1 <- GDP_diabetes_cal[,-(1:2),drop=FALSE]
View(data_1)
View(data_1)
data_1 <- GDP_diabetes_cal[,-(1:2),drop=FALSE]
rownames(data_1) <- c("AUT", "BEL", "BGR", "HRV", "CYP", "CZE", "DNK", "EST", "FIN", "FRA", "DEU","GRC", "HUN", "IRL", "ITA", "LVA", "LTU", "LUX", "MLT", "NLD", "POL", "PRT", "ROU", "SVK", "SVN", "ESP", "SWE", "GBR", "CHE")
model <- kmeans(data_1, centers = 3, nstart = 10)
# displays the class determined by
# the model for all observations:
model$cluster
# displays the class determined by
# the model for all observations:
model$cluster
Data_cluster <- data.frame(data_1,
cluster = as.factor(model$cluster)
)
Data_cluster <- data.frame(data_1,
cluster = as.factor(model$cluster)
)
head(Data_cluster)
#prediction of cluster
#install.packages('parameters')
#install.packages('see')
library(see)
#prediction of cluster
#install.packages('parameters')
#install.packages('see')
library(see)
library(parameters)
res_kmeans <- cluster_analysis(data_1,
n = 3,
method = "kmeans")
predict(res_kmeans) # get clusters
plot(res_kmeans)
plot(res_kmeans)
myCluster <- data.frame(row.names(data_1), model$cluster)
head(myCluster)
myCluster <- data.frame(row.names(data_1), res_kmeans$cluster)
myCluster <- data.frame(row.names(data_1), res_kmeans)
head(myCluster)
View(myCluster)
plot(res_kmeans)
res_kmeans <- cluster_analysis(data_1,
n = 3,
method = "kmeans",
nstart = 10)
res_kmeans <- cluster_analysis(data_1,
n = 3,
method = "kmeans"$
)
res_kmeans <- cluster_analysis(data_1,
n = 3,
method = "kmeans")
predict(res_kmeans) # get clusters
plot(res_kmeans)
myCluster <- data.frame(row.names(data_1), res_kmeans)
head(myCluster)
res_kmeans <- cluster_analysis(data_1,
n = 4,
method = "kmeans")
predict(res_kmeans) # get clusters
plot(res_kmeans)
myCluster <- data.frame(row.names(data_1), res_kmeans)
head(myCluster)
head(Data_cluster)
#prediction of cluster
#install.packages('parameters')
#install.packages('see')
library(see)
library(parameters)
library(factoextra)
library(NbClust)
install.packages(NbClust)
install.packages('NbClust')
library(NbClust)
fviz_nbclust(data_1, kmeans, method = "wss") +
geom_vline(xintercept = 4, linetype = 2) + # add line for better visualisation
labs(subtitle = "Elbow method") # add subtitle
#prediction of cluster
#install.packages('parameters')
#install.packages('see')
library(see)
library(parameters)
library(factoextra)
library(NbClust)
fviz_nbclust(data_1, kmeans, method = "wss") +
geom_vline(xintercept = 2, linetype = 2) + # add line for better visualisation
labs(subtitle = "Elbow method") # add subtitle
res_kmeans <- cluster_analysis(data_1,
n = 2,
method = "kmeans")
predict(res_kmeans) # get clusters
plot(res_kmeans)
res_kmeans <- cluster_analysis(data_1,
n = 2,
method = "kmeans")
predict(res_kmeans) # get clusters
View(data_1)
plot(res_kmeans)
myCluster <- data.frame(row.names(data_1), res_kmeans)
predict(res_kmeans) # get clusters
plot(res_kmeans)
myCluster <- data.frame(row.names(data_1), res_kmeans)
head(myCluster)
data_1 <- GDP_diabetes_cal[,-(1:2),drop=FALSE]
rownames(data_1) <- c("AUT", "BEL", "BGR", "HRV", "CYP", "CZE", "DNK", "EST", "FIN", "FRA", "DEU","GRC", "HUN", "IRL", "ITA", "LVA", "LTU", "LUX", "MLT", "NLD", "POL", "PRT", "ROU", "SVK", "SVN", "ESP", "SWE", "GBR", "CHE")
model <- kmeans(data_1, centers = 3, nstart = 10)
# displays the class determined by
# the model for all observations:
model$cluster
Data_cluster <- data.frame(data_1,
cluster = as.factor(model$cluster)
)
head(Data_cluster)
plot(Data_cluster)
data_1 <- GDP_diabetes_cal[,-(1:2),drop=FALSE]
rownames(data_1) <- c("AUT", "BEL", "BGR", "HRV", "CYP", "CZE", "DNK", "EST", "FIN", "FRA", "DEU","GRC", "HUN", "IRL", "ITA", "LVA", "LTU", "LUX", "MLT", "NLD", "POL", "PRT", "ROU", "SVK", "SVN", "ESP", "SWE", "GBR", "CHE")
model_cluster <- kmeans(data_1, centers = 3, nstart = 10)
# displays the class determined by
# the model for all observations:
model_cluster$cluster
Data_cluster <- data.frame(data_1,
cluster = as.factor(model_cluster$cluster)
)
plot(model_cluster)
kable(Data_cluster)
data_1 <- GDP_diabetes_cal[,-(1:2),drop=FALSE]
rownames(data_1) <- c("AUT", "BEL", "BGR", "HRV", "CYP", "CZE", "DNK", "EST", "FIN", "FRA", "DEU","GRC", "HUN", "IRL", "ITA", "LVA", "LTU", "LUX", "MLT", "NLD", "POL", "PRT", "ROU", "SVK", "SVN", "ESP", "SWE", "GBR", "CHE")
model_cluster <- kmeans(data_1, centers = 3, nstart = 10)
# displays the class determined by
# the model for all observations:
model_cluster$cluster
Data_cluster <- data.frame(data_1,
cluster = as.factor(model_cluster$cluster)
)
res_kmeans_3 <- cluster_analysis(data_1,
n = 3,
method = "kmeans")
predict(res_kmeans_3) # get clusters
plot(res_kmeans_3)
kable(res_kmeans_3)
data_1 <- GDP_diabetes_cal[,-(1:2),drop=FALSE]
rownames(data_1) <- c("AUT", "BEL", "BGR", "HRV", "CYP", "CZE", "DNK", "EST", "FIN", "FRA", "DEU","GRC", "HUN", "IRL", "ITA", "LVA", "LTU", "LUX", "MLT", "NLD", "POL", "PRT", "ROU", "SVK", "SVN", "ESP", "SWE", "GBR", "CHE")
model_cluster <- kmeans(data_1, centers = 3, nstart = 10)
# displays the class determined by
# the model for all observations:
model_cluster$cluster
Data_cluster <- data.frame(data_1,
cluster = as.factor(model_cluster$cluster)
)
data_1 <- GDP_diabetes_cal[,-(1:2),drop=FALSE]
rownames(data_1) <- c("AUT", "BEL", "BGR", "HRV", "CYP", "CZE", "DNK", "EST", "FIN", "FRA", "DEU","GRC", "HUN", "IRL", "ITA", "LVA", "LTU", "LUX", "MLT", "NLD", "POL", "PRT", "ROU", "SVK", "SVN", "ESP", "SWE", "GBR", "CHE")
model_cluster <- kmeans(data_1, centers = 3, nstart = 10)
# displays the class determined by
# the model for all observations:
kable(model_cluster$cluster)
# displays the class determined by
# the model for all observations:
kable(model_cluster$cluster,  col.names = c("Cluster"))
Data_cluster <- data.frame(data_1,
cluster = as.factor(model_cluster$cluster)
)
Data_cluster <- data.frame(data_1,
cluster = as.factor(model_cluster$cluster)
)
cluster_3 <- model_cluster %>%
group_by(Cluster)
res_kmeans_3 <- cluster_analysis(data_1,
n = 3,
method = "kmeans")
predict(res_kmeans_3) # get clusters
plot(res_kmeans_3)
kable(res_kmeans_3)
data_1 <- GDP_diabetes_cal[,-(1:2),drop=FALSE]
rownames(data_1) <- c("AUT", "BEL", "BGR", "HRV", "CYP", "CZE", "DNK", "EST", "FIN", "FRA", "DEU","GRC", "HUN", "IRL", "ITA", "LVA", "LTU", "LUX", "MLT", "NLD", "POL", "PRT", "ROU", "SVK", "SVN", "ESP", "SWE", "GBR", "CHE")
fviz_nbclust(data_1, kmeans, method = "wss") +
geom_vline(xintercept = 2, linetype = 2) + # add line for better visualisation
labs(subtitle = "Elbow method") # add subtitle
res_kmeans <- cluster_analysis(data_1,
n = 2,
method = "kmeans")
predict(res_kmeans) # get clusters
plot(res_kmeans)
myCluster <- data.frame(row.names(data_1), res_kmeans)
kable(myClustercol.names = c("Country","Cluster"))
kable(myCluster, col.names = c("Country","Cluster"))
plot(res_kmeans)
model_cluster <- kmeans(data_1, centers = 3, nstart = 10)
# displays the class determined by
# the model for all observations:
kable(model_cluster$cluster,  col.names = c("Cluster"))
Data_cluster <- data.frame(data_1,
cluster = as.factor(model_cluster$cluster)
)
```{r}
predict(res_kmeans_3) # get clusters
plot(res_kmeans_3)
predict(res_kmeans_3) # get clusters
model_cluster <- kmeans(data_1, centers = 3, nstart = 10)
# displays the class determined by
# the model for all observations:
kable(model_cluster$cluster,  col.names = c("Cluster"))
Data_cluster <- data.frame(data_1,
cluster = as.factor(model_cluster$cluster)
)
```{r}
res_kmeans_3 <- cluster_analysis(data_1,
n = 3,
method = "kmeans")
predict(res_kmeans_3) # get clusters
plot(res_kmeans_3)
```{r}
plot(res_kmeans_3)
myCluster %>%
group_by(Cluster) %>%
View(myCluster)
View(myCluster)
kable(myCluster, col.names = c("Country","Cluster"))
myCluster <- data.frame(row.names(data_1), res_kmeans, col.names = c("Country","Cluster"))
myCluster %>%
group_by(res_kmeans) %>%
kable(myCluster, col.names = c("Country","Cluster"))
myCluster %>%
group_by(res_kmeans)
kable(myCluster, col.names = c("Country","Cluster"))
myCluster<-myCluster %>%
group_by(res_kmeans)
kable(myCluster, col.names = c("Country","Cluster"))
myCluster<-myCluster %>%
group_by(res_kmeans)
View(myCluster)
myCluster %>%
group_by(res_kmeans)
able(myCluster %>%
group_by(res_kmeans),
col.names = c("Country","Cluster"))
kable(myCluster %>%
group_by(res_kmeans),
col.names = c("Country","Cluster"))
kable(myCluster %>%
group_by(res_kmeans),
col.names = c("Country","Cluster"))
myCluster %>%
group_by(res_kmeans)
myCluster %>%
group_by(res_kmeans)
kable(myCluster %>%
group_by(res_kmeans)%>%
arrange(desc) %>%
col.names = c("Country","Cluster"))
myCluster %>%
group_by(res_kmeans)%>%
arrange(desc) %>%
View(myCluster)
View(myCluster)
cluster_1.1 <- myCluster %>%
filter(res_kmeans == "1") %>%
cluster_1.1 <- myCluster %>%
filter(res_kmeans == "1") %>%
myCluster %>%
group_by(res_kmeans)%>%
arrange(desc) %>%
cluster_1.1 <- myCluster %>%
filter(res_kmeans == "1") %>%
kable(myCluster, col.names = c("Country","Cluster"))
cluster_1.1 <- myCluster %>%
filter(res_kmeans == "1") %>%
kable(myCluster, col.names = c("Country","Cluster"))
cluster_1.1 <- myCluster %>%
filter(res_kmeans == "1") %>%
cluster_1.1 <- myCluster %>%
filter(res_kmeans == "1") %>%
kable(cluster_1.1, col.names = c("Country","Cluster"))
View(myCluster)
cluster_1.1 <- myCluster %>%
filter(res_kmeans == "1") %>%
select(row.names(data_1, res_kmeans)
kable(cluster_1.1, col.names = c("Country","Cluster"))
kable(cluster_1.1, col.names = c("Country","Cluster")
cluster_1.1 <- myCluster %>%
cluster_1<- myCluster %>%
filter(res_kmeans == "1") %>%
select(row.names(data_1, res_kmeans))
cluster_1<- myCluster %>%
filter(res_kmeans == 1) %>%
select(row.names(data_1, res_kmeans))
cluster_1<- myCluster %>%
filter(res_kmeans == 1) %>%
select(row.names(data_1, res_kmeans))
cluster_1<- myCluster %>%
group_by(res_kmeans)
View(cluster_1)
cluster_1<- myCluster %>%
filter(res_kmeans == 1) %>%
select(row.names(data_1, res_kmeans))
library(leaflet)
#test
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=174.768, lat=-36.852, popup="The birthplace of R")
setView(Europe)
m  # Print the map
source(here::here("scripts/setup.R"))
source(here::here("/report/data.Rmd"))
#Map Europe
install.packages("eurostat")
library(tidyverse)
library(eurostat)
library(leaflet)
library(sf)
library(geojsonsf)
EU_coord<- geojsonsf::geojson_sf('data/CNTR_RG_60M_2020_3035.geojson') # source of the geojson file https://ec.europa.eu/eurostat/web/gisco/geodata/reference-data/administrative-units-statistical-units/countries
all_data = merge(EU_coord, GDP_diabetes_cal, by.x = "ISO3_CODE", by.y = "country_code")
st_write(all_data, "MapApp/geojson_manipulation/main.geojson")
#trying one way
get_eurostat_geospatial(resolution = 10,
nuts_level = 0,
year = 2016)
SHP_0 <- get_eurostat_geospatial(resolution = 10,
nuts_level = 0,
year = 2016)
leaflet(SHP_0) %>%
setView(lng = 15, lat = 50, zoom = 4) %>%
addTiles() %>%
addPolygons(color = "black",
weight = 1,
fillColor = "blue",
fillOpacity = 0.2)
L.geoJSON(geojsonFeature).addTo(map)
map_lad <- map %>%
leaflet::addPolygons(
data = all_data,  # EU polygon data from geojson
weight = 1,  # line thickness
opacity = 1,  # line transparency
color = "black",  # line colour
fillOpacity = ifelse(  # conditional fill opacity
test = all_data$st_areashape > 1E+09,  # if area is over this value
yes = 0.5,  # then make it half-opaque
no = 0  # otherwise make it entirely transparent
),
fillColor = "red",
label = ~ISO3_CODE  # LAD name as a hover label
)
map_lad
pal <- colorNumeric("viridis", NULL)
leaflet(all_data) %>%
addTiles() %>%
addPolygons(stroke = FALSE, smoothFactor = 0.3, fillOpacity = 1,
fillColor = ~pal(log10(total_consumption)),
label = ~paste0(ISO3_CODE, ": ", formatC(total_consumption, big.mark = ","))) %>%
addLegend(pal = pal, values = ~log10(total_consumption), opacity = 1.0,
labFormat = labelFormat(transform = function(x) round(10^x)))
map_lad <- map %>%
leaflet::addPolygons(
data = all_data,  # EU polygon data from geojson
weight = 1,  # line thickness
opacity = 1,  # line transparency
color = "black",  # line colour
fillOpacity = ifelse(  # conditional fill opacity
test = all_data$st_areashape > 1E+09,  # if area is over this value
yes = 0.5,  # then make it half-opaque
no = 0  # otherwise make it entirely transparent
),
fillColor = "red",
label = ~ISO3_CODE  # LAD name as a hover label
)
map_lad
map_lad <- map %>%
leaflet::addPolygons(
data = all_data,  # EU polygon data from geojson
weight = 1,  # line thickness
opacity = 1,  # line transparency
color = "black",  # line colour
fillOpacity = ifelse(  # conditional fill opacity
test = all_data$st_areashape > 1E+09,  # if area is over this value
yes = 0.5,  # then make it half-opaque
no = 0  # otherwise make it entirely transparent
),
fillColor = "red",
label = ~ISO3_CODE  # LAD name as a hover label
)
map_lad
pal <- colorNumeric("viridis", NULL)
leaflet(all_data) %>%
addTiles() %>%
addPolygons(stroke = FALSE, smoothFactor = 0.3, fillOpacity = 1,
fillColor = ~pal(log10(total_consumption)),
label = ~paste0(ISO3_CODE, ": ", formatC(total_consumption, big.mark = ","))) %>%
addLegend(pal = pal, values = ~log10(total_consumption), opacity = 1.0,
labFormat = labelFormat(transform = function(x) round(10^x)))
et_eurostat_geospatial(resolution = 10,
nuts_level = 0,
year = 2016)
SHP_0 <- get_eurostat_geospatial(resolution = 10,
nuts_level = 0,
year = 2016)
leaflet(SHP_0) %>%
setView(lng = 15, lat = 50, zoom = 4) %>%
addTiles() %>%
addPolygons(color = "black",
weight = 1,
fillColor = "blue",
fillOpacity = 0.2)
L.geoJSON(geojsonFeature).addTo(map)
leaflet(italy) %>%
addPolygons() %>%
addTiles()
all_data = merge(EU_coord, myCluster, by.x = "ISO3_CODE", by.y = "country_code")
View(myCluster)
all_data = merge(EU_coord, myCluster, by.x = "ISO3_CODE", by.y = "row.names.data_1.")
st_write(all_data, "MapApp/geojson_manipulation/main.geojson")
#trying one way
get_eurostat_geospatial(resolution = 10,
nuts_level = 0,
year = 2016)
SHP_0 <- get_eurostat_geospatial(resolution = 10,
nuts_level = 0,
year = 2016)
leaflet(SHP_0) %>%
setView(lng = 15, lat = 50, zoom = 4) %>%
addTiles() %>%
addPolygons(color = "black",
weight = 1,
fillColor = "blue",
fillOpacity = 0.2)
L.geoJSON(geojsonFeature).addTo(map)
leaflet(italy) %>%
addPolygons() %>%
addTiles()
