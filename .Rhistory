addPolygons(stroke = FALSE, smoothFactor = 0.2, fillOpacity = 1,
color = ~pal(CL_EU$prop_men_diabetes)
) %>%
addLegend("bottomright", pal = pal, values = ~CL_EU$prop_men_diabetes,
title = "Men Diabetes",
opacity = 1
)
pal <- colorNumeric(
palette = "heat",
domain = CL_EU$avg_gdp)
leaflet(SHP_0) %>%
setView(lng = 15, lat = 50, zoom = 4) %>%
addTiles() %>%
addPolygons(stroke = FALSE, smoothFactor = 0.2, fillOpacity = 1,
color = ~pal(CL_EU$avg_gdp)
) %>%
addLegend("bottomright", pal = pal, values = ~CL_EU$avg_gdp),
pal <- colorNumeric(
palette = "heat",
domain = CL_EU$avg_gdp)
leaflet(SHP_0) %>%
setView(lng = 15, lat = 50, zoom = 4) %>%
addTiles() %>%
addPolygons(stroke = FALSE, smoothFactor = 0.2, fillOpacity = 1,
color = ~pal(CL_EU$avg_gdp)
) %>%
addLegend("bottomright", pal = pal, values = ~CL_EU$avg_gdp,
title = "Average GDP",
opacity = 1
)
pal <- colorNumeric(
palette = "YlGnBu",
domain = CL_EU$avg_gdp)
leaflet(SHP_0) %>%
setView(lng = 15, lat = 50, zoom = 4) %>%
addTiles() %>%
addPolygons(stroke = FALSE, smoothFactor = 0.2, fillOpacity = 1,
color = ~pal(CL_EU$avg_gdp)
) %>%
addLegend("bottomright", pal = pal, values = ~CL_EU$avg_gdp,
title = "Average GDP",
opacity = 1
)
pal <- colorNumeric(
palette = "Orange",
domain = CL_EU$avg_gdp)
leaflet(SHP_0) %>%
setView(lng = 15, lat = 50, zoom = 4) %>%
addTiles() %>%
addPolygons(stroke = FALSE, smoothFactor = 0.2, fillOpacity = 1,
color = ~pal(CL_EU$avg_gdp)
) %>%
addLegend("bottomright", pal = pal, values = ~CL_EU$avg_gdp,
title = "Average GDP",
opacity = 1
)
pal <- colorNumeric(
palette = "Rainbow",
domain = CL_EU$avg_gdp)
leaflet(SHP_0) %>%
setView(lng = 15, lat = 50, zoom = 4) %>%
addTiles() %>%
addPolygons(stroke = FALSE, smoothFactor = 0.2, fillOpacity = 1,
color = ~pal(CL_EU$avg_gdp)
) %>%
addLegend("bottomright", pal = pal, values = ~CL_EU$avg_gdp,
title = "Average GDP",
opacity = 1
)
![logo created by us](/Diab.png/)
![logo created by us](Diab.png/)
![logo created by us](DSFBA_Project/blob/main/Diab.png/)
![logo created by us](main/Diab.png)
![logo created by us.](/Diab.png)
install.packages('png')
library(png)
![Logo created by us]("https://github.com/clara-ness/DSFBA_Project/blob/main/Diab.png")
![](../diab.png)
source(here::here("scripts/setup.R"))
daily_caloric <- read_csv(here::here("data/daily-caloric.csv"))
daily_caloric <- subset(daily_caloric, Year >= 2000)
EU <- c("AUT", "BEL", "BGR", "HRV", "CYP", "CZE", "DNK", "EST", "FIN", "FRA", "DEU", "GRC", "HUN", "IRL", "ITA", "LVA", "LTU", "LUX", "MLT", "NLD", "POL", "PRT", "ROU", "SVK", "SVN", "ESP", "SWE", "GBR", "CHE")
daily_caloric<-daily_caloric[daily_caloric$Code %in% EU,]
setDT(daily_caloric)[ , Calories_from_animal_protein := mean(`Calories from animal protein (FAO (2017))`), by = "Entity"]
setDT(daily_caloric)[ , Calories_from_plant_protein := mean(`Calories from plant protein (FAO (2017))`), by = "Entity"]
setDT(daily_caloric)[ , Calories_from_carbohydrates := mean(`Calories from carbohydrates (FAO (2017))`), by = "Entity"]
setDT(daily_caloric)[ , Calories_from_fat := mean(`Calories from fat (FAO (2017))`), by = "Entity"]
Caloric_consumption <- data.table(daily_caloric$Entity,daily_caloric$Code,daily_caloric$Calories_from_animal_protein, daily_caloric$Calories_from_plant_protein,daily_caloric$Calories_from_carbohydrates,daily_caloric$Calories_from_fat)
Caloric_consumption <-Caloric_consumption[!duplicated(Caloric_consumption)]
Caloric_consumption <- Caloric_consumption[,-1]
colnames(Caloric_consumption) <- c("country_code", "cal_prot_animal", "cal_prot_plant", "cal_carbs","cal_fat")
Caloric_consumption <-Caloric_consumption %>%
group_by(country_code) %>%
mutate(
total_consumption = sum(c(cal_prot_animal,cal_prot_plant,cal_carbs,cal_fat)))
Caloric_consumption$total_consumption <- as.numeric(Caloric_consumption$total_consumption)
kbl(Caloric_consumption,
caption = "**Table 1**: Caloric Consumption",
col.names = c('Country Code', 'Calories from animal protein', 'Calories from plant protein','Calories from carbohydrates', 'Calories from fat', 'Total consumption'),
align = c('cccccc')) %>%
kable_classic(full_width = T, html_font = "Cambria") %>%
kable_styling(bootstrap_options = c('striped', 'hover', 'condensed'))
GDP <- read_excel(here::here("data/GDP(1960-2020).xls"))
colnames(GDP) <- GDP[3,]
GDP <- GDP[-c(1:3),-c(3:44,59:65)]
GDP <- GDP[GDP$"Country Code" %in% EU,]
GDP <- GDP %>% pivot_longer(c('2000','2001','2002','2003','2004','2005','2006','2007','2008','2009','2010','2011','2012','2013'),names_to = "Year",values_to = "Gross Domestic Product")
colnames(GDP) <- c("country_name","country_code","year","avg_gdp")
GDP$avg_gdp <- as.numeric(GDP$avg_gdp)/1000000000
GDP2 <- GDP
GDP2$avg_gdp <- GDP2$avg_gdp*1000000000
GDP_summarized <- GDP %>%
group_by(country_name, country_code) %>%
dplyr::summarize(avg_gdp = mean(avg_gdp))
kbl(GDP_summarized,
caption = "**Table 2**: GDP",
col.names = c('Country Name', 'Country Code', 'Average GDP (in billion $)'),
align = c('cccccc')) %>%
kable_classic(full_width = T, html_font = "Cambria") %>%
kable_styling(bootstrap_options = c('striped', 'hover', 'condensed'))
population <- read_excel(here::here("data/population.xls"))
colnames(population) <- population[3,]
population <- population[-c(1:3),-c(3:44,59:65)]
population <- population[population$"Country Code" %in% EU,]
population <- population %>% pivot_longer(c('2000','2001','2002','2003','2004','2005','2006','2007','2008','2009','2010','2011','2012','2013'),names_to = "Year",values_to = "Total Population")
colnames(population) <- c("country_name","country_code","year","avg_population")
population$avg_population <- as.numeric(population$avg_population)
GDP2 <- mutate(GDP2, gdp_per_person = GDP2$avg_gdp/population$avg_population)
GDP_summarized2 <- GDP2 %>%
group_by(country_name, country_code) %>%
dplyr::summarize(gdp_per_person = mean(gdp_per_person))
Diabetes <- read_csv(here::here("data/Diabetes.csv"))
Diabetes <- subset(Diabetes, Year >= 2000 , Year <=2013)
Diabetes_EU<-Diabetes[Diabetes$`ISO` %in% EU,]
Diabetes_EU <- Diabetes_EU[-c(6,7)]
colnames(Diabetes_EU)<-c("country","ISO","sex","year","prop_diabetes")
Diabetes_EU_men <-subset(Diabetes_EU, sex=="Men")
Diabetes_EU_women <-subset(Diabetes_EU, sex=="Women")
colnames(Diabetes_EU_men)<-c("country","country_code","sex","year","prop_men_diabetes")
colnames(Diabetes_EU_women)<-c("country","country_code","sex","year","prop_women_diabetes")
Diabetes_EU_men <- Diabetes_EU_men %>%
group_by(country_code) %>%
dplyr::summarize(prop_men_diabetes = mean(prop_men_diabetes))
kbl(Diabetes_EU_men,
caption = "**Table 3**: Diabetes rates for men",
col.names = c('Country Code', 'Diabetes rate'),
align = c('cccccc')) %>%
kable_classic(full_width = T, html_font = "Cambria") %>%
kable_styling(bootstrap_options = c('striped', 'hover', 'condensed'))
Diabetes_EU_women <- Diabetes_EU_women %>%
group_by(country_code) %>%
dplyr::summarize(prop_women_diabetes = mean(prop_women_diabetes))
kbl(Diabetes_EU_men,
caption = "**Table 4**: Diabetes rates for women",
col.names = c('Country Code', 'Diabetes rate'),
align = c('cccccc')) %>%
kable_classic(full_width = T, html_font = "Cambria") %>%
kable_styling(bootstrap_options = c('striped', 'hover', 'condensed'))
GDP_diabetes_cal <- full_join(GDP_summarized,GDP_summarized2, by=c("country_name","country_code"))
GDP_diabetes_cal <-full_join(GDP_diabetes_cal,Diabetes_EU_men, by="country_code")
GDP_diabetes_cal <-full_join(GDP_diabetes_cal,Diabetes_EU_women, by="country_code")
GDP_diabetes_cal <-full_join(GDP_diabetes_cal ,Caloric_consumption, by="country_code")
kbl(GDP_diabetes_cal,
caption = "**Table 5**: Joint table for GDP, diabetes and caloric consumption",
col.names = c('Country Name','Country Code','Average GDP (in billion $)','GDP per person (in $)','Men Diabetes', 'Women Diabetes', 'Calories from animal protein', 'Calories from plant protein','Calories from carbohydrates', 'Calories from fat', 'Total consumption'),
align = c('cccccc')) %>%
kable_classic(full_width = T, html_font = "Cambria") %>%
kable_styling(bootstrap_options = c('striped', 'hover', 'condensed'))
data_1 <- GDP_diabetes_cal[, -(1:2), drop = FALSE] #-> introduce the proportions later on ?
rownames(data_1) <- c("AUT", "BEL", "BGR", "HRV", "CYP", "CZE", "DNK", "EST", "FIN", "FRA", "DEU", "GRC", "HUN", "IRL", "ITA", "LVA", "LTU", "LUX", "MLT", "NLD", "POL", "PRT", "ROU", "SVK", "SVN", "ESP", "SWE", "GBR", "CHE")
fviz_nbclust(data_1, kmeans, method = "wss") +
geom_vline(xintercept = 3, linetype = 2) + # add line for better visualisation
labs(subtitle = "Elbow method") + # add subtitle
scale_y_continuous(labels = scales::label_number_si())
set.seed(123)
model_cluster <- kmeans(data_1, centers = 3, nstart = 10)
Data_cluster <- data.frame(data_1, cluster = as.factor(model_cluster$cluster))
countries_cluster_1 <- filter(Data_cluster, cluster == "1")
countries_cluster_2 <- filter(Data_cluster, cluster == "2")
countries_cluster_3 <- filter(Data_cluster, cluster == "3")
myCluster <- rbind.data.frame(countries_cluster_1, countries_cluster_2, countries_cluster_3)
EU_cluster <- c("AT", "BE", "DK", "FI", "FR", "DE", "IE", "IT", "NL", "SE", "CH", "BG", "HR", "CY", "CZ", "EE", "EL", "HU", "LV", "LT", "MT", "PL", "PT", "RO", "SK", "SI", "ES", "LU", "UK")
CL_EU <- cbind(myCluster, EU_cluster)
SHP_0 <- get_eurostat_geospatial(
resolution = 10,
nuts_level = 0,
year = 2016
)
SHP_0 <- get_eurostat_geospatial(
resolution = 10,
nuts_level = 0,
year = 2016
)
SHP_0 <- SHP_0[-c(1, 15, 24, 26, 28, 29, 33, 34), ]
nb_cluster <- as.numeric(levels(CL_EU$cluster))[CL_EU$cluster]
CL_EU <- cbind(CL_EU, nb_cluster)
# Color for each cluster
for (i in 1:29) {
if (CL_EU$nb_cluster[i] == 1) {
CL_EU$col[i]=c('red')
} else if (CL_EU$nb_cluster[i] == 2) {
CL_EU$col[i]=c('blue')
} else {
CL_EU$col[i]=c('green')
}
}
CL_EU <- CL_EU[match(SHP_0$FID,CL_EU$EU_cluster),]
leaflet(SHP_0) %>%
setView(lng = 15, lat = 50, zoom = 4) %>%
addTiles() %>%
addPolygons(
color = "black",
weight = .5,
fillOpacity = .5,
fillColor = CL_EU$col,) %>%
addLegend("bottomright",
colors = c("red","blue","green"),
labels = c("1","2","3"),
title= "Cluster number",
opacity = .6)
#Trying to put a button to display all the countires graphs
#Plotting the evolution of the macronutrients consumption over the years for each country
cal_unique <- unique(daily_caloric, by =c('Entity')) # Sorting table by entity (unique)
for (i in 1:nrow(cal_unique)) { # Loop for each entity
# Taking subset of data table for the chosen entity i
tmp <- subset(daily_caloric,Entity == tmp, select = c("Year","Calories from animal protein (FAO (2017))","Calories #from plant protein (FAO (2017))","Calories from fat (FAO (2017))","Calories from carbohydrates (FAO (2017))"))
#Melting the data by years (i.e. getting each value for the different rows for each year)
tmp <- melt(tmp ,  id.vars = 'Year', variable.name = 'Series')
#Melting the data by years (i.e. getting each value for the different rows for each year)
tmp <- melt(tmp ,  id.vars = 'Year', variable.name = 'Series')
```{r}
View(cal_unique)
daily_caloric <- read_csv(here::here("data/daily-caloric.csv"))
daily_caloric <- read_csv(here::here("data/daily-caloric.csv"))
daily_caloric <- subset(daily_caloric, Year >= 2000)
EU <- c("AUT", "BEL", "BGR", "HRV", "CYP", "CZE", "DNK", "EST", "FIN", "FRA", "DEU", "GRC", "HUN", "IRL", "ITA", "LVA", "LTU", "LUX", "MLT", "NLD", "POL", "PRT", "ROU", "SVK", "SVN", "ESP", "SWE", "GBR", "CHE")
daily_caloric<-daily_caloric[daily_caloric$Code %in% EU,]
setDT(daily_caloric)[ , Calories_from_animal_protein := mean(`Calories from animal protein (FAO (2017))`), by = "Entity"]
setDT(daily_caloric)[ , Calories_from_plant_protein := mean(`Calories from plant protein (FAO (2017))`), by = "Entity"]
setDT(daily_caloric)[ , Calories_from_carbohydrates := mean(`Calories from carbohydrates (FAO (2017))`), by = "Entity"]
setDT(daily_caloric)[ , Calories_from_fat := mean(`Calories from fat (FAO (2017))`), by = "Entity"]
Caloric_consumption <- data.table(daily_caloric$Entity,daily_caloric$Code,daily_caloric$Calories_from_animal_protein, daily_caloric$Calories_from_plant_protein,daily_caloric$Calories_from_carbohydrates,daily_caloric$Calories_from_fat)
Caloric_consumption <-Caloric_consumption[!duplicated(Caloric_consumption)]
Caloric_consumption <- Caloric_consumption[,-1]
colnames(Caloric_consumption) <- c("country_code", "cal_prot_animal", "cal_prot_plant", "cal_carbs","cal_fat")
Caloric_consumption <-Caloric_consumption %>%
group_by(country_code) %>%
mutate(
total_consumption = sum(c(cal_prot_animal,cal_prot_plant,cal_carbs,cal_fat)))
Caloric_consumption$total_consumption <- as.numeric(Caloric_consumption$total_consumption)
cal_unique <- unique(daily_caloric, by =c('Entity')) # Sorting table by entity (unique)
for (i in 1:nrow(cal_unique)) { # Loop for each entity
tmp <- cal_unique$Entity[i]     # Getting the entity name i
tmp <- subset(daily_caloric,Entity == tmp, select = c("Year","Calories from animal protein (FAO (2017))","Calories #from plant protein (FAO (2017))","Calories from fat (FAO (2017))","Calories from carbohydrates (FAO (2017))"))
tmp <- melt(tmp ,  id.vars = 'Year', variable.name = 'Series')
for (i in 1:nrow(cal_unique)) { # Loop for each entity
tmp <- cal_unique$Entity[i]     # Getting the entity name i
tmp <- subset(daily_caloric,Entity == tmp, select = c("Year","Calories from animal protein (FAO (2017))","Calories #from plant protein (FAO (2017))","Calories from fat (FAO (2017))","Calories from carbohydrates (FAO (2017))"))
tmp <- melt(tmp ,  id.vars = 'Year', variable.name = 'Series')
}
packages <- c(
"here", # for the project's organization
"tidyverse", "lubridate","readr","dplyr", "readxl","data.table", # for wrangling
"ggrepel", "gghighlight", "patchwork", "maps", "scales", "ggplot2", "plotly", "shiny", "papeR", "ggpubr", # for plotting
"leaflet", "eurostat", "sf", "geojsonsf", # for mapping
"knitr", "kableExtra", "bookdown", "rmarkdown", "parameters", "see", "factoextra", "NbClust","sjPlot", "sjmisc", "sjlabelled" # for the report
)
purrr::walk(packages, library, character.only = TRUE)
daily_caloric <- read_csv(here::here("data/daily-caloric.csv"))
daily_caloric <- subset(daily_caloric, Year >= 2000)
EU <- c("AUT", "BEL", "BGR", "HRV", "CYP", "CZE", "DNK", "EST", "FIN", "FRA", "DEU", "GRC", "HUN", "IRL", "ITA", "LVA", "LTU", "LUX", "MLT", "NLD", "POL", "PRT", "ROU", "SVK", "SVN", "ESP", "SWE", "GBR", "CHE")
daily_caloric<-daily_caloric[daily_caloric$Code %in% EU,]
setDT(daily_caloric)[ , Calories_from_animal_protein := mean(`Calories from animal protein (FAO (2017))`), by = "Entity"]
setDT(daily_caloric)[ , Calories_from_plant_protein := mean(`Calories from plant protein (FAO (2017))`), by = "Entity"]
setDT(daily_caloric)[ , Calories_from_carbohydrates := mean(`Calories from carbohydrates (FAO (2017))`), by = "Entity"]
setDT(daily_caloric)[ , Calories_from_fat := mean(`Calories from fat (FAO (2017))`), by = "Entity"]
Caloric_consumption <- data.table(daily_caloric$Entity,daily_caloric$Code,daily_caloric$Calories_from_animal_protein, daily_caloric$Calories_from_plant_protein,daily_caloric$Calories_from_carbohydrates,daily_caloric$Calories_from_fat)
Caloric_consumption <-Caloric_consumption[!duplicated(Caloric_consumption)]
Caloric_consumption <- Caloric_consumption[,-1]
colnames(Caloric_consumption) <- c("country_code", "cal_prot_animal", "cal_prot_plant", "cal_carbs","cal_fat")
Caloric_consumption <-Caloric_consumption %>%
group_by(country_code) %>%
mutate(
total_consumption = sum(c(cal_prot_animal,cal_prot_plant,cal_carbs,cal_fat)))
Caloric_consumption$total_consumption <- as.numeric(Caloric_consumption$total_consumption)
cal_unique <- unique(daily_caloric, by =c('Entity')) # Sorting table by entity (unique)
for (i in 1:nrow(cal_unique)) { # Loop for each entity
tmp <- cal_unique$Entity[i]     # Getting the entity name i
tmp <- subset(daily_caloric,Entity == tmp, select = c("Year","Calories from animal protein (FAO (2017))","Calories #from plant protein (FAO (2017))","Calories from fat (FAO (2017))","Calories from carbohydrates (FAO (2017))"))
tmp <- melt(tmp ,  id.vars = 'Year', variable.name = 'Series')
}
tmp <- melt(tmp ,  id.vars = 'Year', variable.name = 'Series')
}
for (i in 1:nrow(cal_unique)) { # Loop for each entity
tmp <- cal_unique$Entity[i]     # Getting the entity name i
tmp <- subset(daily_caloric,Entity == tmp, select = c("Year","Calories from animal protein (FAO (2017))","Calories #from plant protein (FAO (2017))","Calories from fat (FAO (2017))","Calories from carbohydrates (FAO (2017))"))
tmp <- melt(tmp ,  id.vars = 'Year', variable.name = 'Series')
}
tmp <- for (i in 1:nrow(cal_unique)) { # Loop for each entity
tmp <- cal_unique$Entity[i]     # Getting the entity name i
tmp <- subset(daily_caloric,Entity == tmp, select = c("Year","Calories from animal protein (FAO (2017))","Calories from plant protein (FAO (2017))","Calories from fat (FAO (2017))","Calories from carbohydrates (FAO (2017))"))
tmp <- melt(tmp ,  id.vars = 'Year', variable.name = 'Series')
}
selectInput("tmp", label = "Countries:",
choices = c("AUT", "BEL", "BGR", "HRV", "CYP", "CZE", "DNK", "EST", "FIN", "FRA", "DEU", "GRC", "HUN", "IRL", "ITA", "LVA", "LTU", "LUX", "MLT", "NLD", "POL", "PRT", "ROU", "SVK", "SVN", "ESP", "SWE", "GBR", "CHE"), selected = 29)
renderPlot({
ggplot(input$tmp, aes(Year,value)) + geom_line(aes(colour = Series),size = 2) +
labs(title = paste("Caloric consumption per year",cal_unique$Entity[i]),
y = "Calories", x = "Year")
})
for (i in 1:nrow(cal_unique)) { # Loop for each entity
tmp <- cal_unique$Entity[i]     # Getting the entity name i
tmp <- subset(daily_caloric,Entity == tmp, select = c("Year","Calories from animal protein (FAO (2017))","Calories from plant protein (FAO (2017))","Calories from fat (FAO (2017))","Calories from carbohydrates (FAO (2017))"))
tmp <- melt(tmp ,  id.vars = 'Year', variable.name = 'Series')
}
selectInput("tmp", label = "Countries:",
choices = c("AUT", "BEL", "BGR", "HRV", "CYP", "CZE", "DNK", "EST", "FIN", "FRA", "DEU", "GRC", "HUN", "IRL", "ITA", "LVA", "LTU", "LUX", "MLT", "NLD", "POL", "PRT", "ROU", "SVK", "SVN", "ESP", "SWE", "GBR", "CHE"), selected = 29)
renderPlot({
ggplot(input$tmp, aes(Year,value)) + geom_line(aes(colour = Series),size = 2) +
labs(title = paste("Caloric consumption per year",cal_unique$Entity[i]),
y = "Calories", x = "Year")
})
View(tmp)
for (i in 1:nrow(cal_unique)) { # Loop for each entity
tmp <- cal_unique$Entity[i]     # Getting the entity name i
tmp <- subset(daily_caloric,Entity == tmp, select = c("Year","Calories from animal protein (FAO (2017))","Calories from plant protein (FAO (2017))","Calories from fat (FAO (2017))","Calories from carbohydrates (FAO (2017))"))
#tmp <- melt(tmp ,  id.vars = 'Year', variable.name = 'Series')
}
selectInput("tmp", label = "Countries:",
choices = c("AUT", "BEL", "BGR", "HRV", "CYP", "CZE", "DNK", "EST", "FIN", "FRA", "DEU", "GRC", "HUN", "IRL", "ITA", "LVA", "LTU", "LUX", "MLT", "NLD", "POL", "PRT", "ROU", "SVK", "SVN", "ESP", "SWE", "GBR", "CHE"), selected = 29)
renderPlot({
ggplot(input$tmp, aes(Year,value)) + geom_line(aes(colour = Series),size = 2) +
labs(title = paste("Caloric consumption per year",cal_unique$Entity[i]),
y = "Calories", x = "Year")
})
for (i in 1:nrow(cal_unique)) { # Loop for each entity
tmp <- cal_unique$Entity[i]     # Getting the entity name i
tmp <- subset(daily_caloric,Entity == tmp, select = c("Year","Calories from animal protein (FAO (2017))","Calories from plant protein (FAO (2017))","Calories from fat (FAO (2017))","Calories from carbohydrates (FAO (2017))"))
#tmp <- melt(tmp ,  id.vars = 'Year', variable.name = 'Series')
}
View(tmp)
cal_unique <- unique(daily_caloric, by =c('Entity')) # Sorting table by entity (unique)
selectInput("cal_unique", label = "Code:",
choices = c("AUT", "BEL", "BGR", "HRV", "CYP", "CZE", "DNK", "EST", "FIN", "FRA", "DEU", "GRC", "HUN", "IRL", "ITA", "LVA", "LTU", "LUX", "MLT", "NLD", "POL", "PRT", "ROU", "SVK", "SVN", "ESP", "SWE", "GBR", "CHE"), selected = 29)
renderPlot({
ggplot(input$cal_unique, aes(Year,value)) + geom_line(aes(colour = Series),size = 2) +
labs(title = paste("Caloric consumption per year",cal_unique$Entity[i]),
y = "Calories", x = "Year")
})
View(cal_unique)
View(cal_unique)
View(Caloric_consumption)
View(daily_caloric)
daily_caloric <- read_csv(here::here("data/daily-caloric.csv"))
daily_caloric <- subset(daily_caloric, Year >= 2000)
selectInput("daily_caloric", label = "Code:",
choices = c("AUT", "BEL", "BGR", "HRV", "CYP", "CZE", "DNK", "EST", "FIN", "FRA", "DEU", "GRC", "HUN", "IRL", "ITA", "LVA", "LTU", "LUX", "MLT", "NLD", "POL", "PRT", "ROU", "SVK", "SVN", "ESP", "SWE", "GBR", "CHE"), selected = 29)
renderPlot({
ggplot(input$daily_caloric, aes(Entity,Year)) + geom_line(aes(colour = Series),size = 2) +
labs(title = paste("Caloric consumption per year",cal_unique$Entity[i]),
y = "Calories", x = "Year")
})
source(here::here("report/analysis.Rmd"))
myCluster <- rbind.data.frame(countries_cluster_1, countries_cluster_2, countries_cluster_3)
EU_cluster <- c("AT", "BE", "DK", "FI", "FR", "DE", "IE", "IT", "NL", "SE", "CH", "BG", "HR", "CY", "CZ", "EE", "EL", "HU", "LV", "LT", "MT", "PL", "PT", "RO", "SK", "SI", "ES", "LU", "UK")
CL_EU <- cbind(myCluster, EU_cluster)
SHP_0 <- get_eurostat_geospatial(
resolution = 10,
nuts_level = 0,
year = 2016
)
SHP_0 <- SHP_0[-c(1, 15, 24, 26, 28, 29, 33, 34), ]
nb_cluster <- as.numeric(levels(CL_EU$cluster))[CL_EU$cluster]
CL_EU <- cbind(CL_EU, nb_cluster)
# Color for each cluster
for (i in 1:29) {
if (CL_EU$nb_cluster[i] == 1) {
CL_EU$col[i]=c('red')
} else if (CL_EU$nb_cluster[i] == 2) {
CL_EU$col[i]=c('blue')
} else {
CL_EU$col[i]=c('green')
}
}
CL_EU <- CL_EU[match(SHP_0$FID,CL_EU$EU_cluster),]
nb_cluster <- as.numeric(levels(CL_EU$cluster))[CL_EU$cluster]
CL_EU <- cbind(CL_EU, nb_cluster)
# Color for each cluster
for (i in 1:29) {
if (CL_EU$nb_cluster[i] == 1) {
CL_EU$col[i]=c('red')
} else if (CL_EU$nb_cluster[i] == 2) {
CL_EU$col[i]=c('blue')
} else {
CL_EU$col[i]=c('green')
}
}
CL_EU <- CL_EU[match(SHP_0$FID,CL_EU$EU_cluster),]
ibrary(tidyverse)
library(lubridate)
Diabetes_unique<-as.data.frame(Diabetes_unique)
selectInput("Diabetes_unique", label = "Countries:",
choices =EU <- c("AUT", "BEL", "BGR", "HRV", "CYP", "CZE", "DNK", "EST", "FIN", "FRA", "DEU", "GRC", "HUN", "IRL", "ITA", "LVA", "LTU", "LUX", "MLT", "NLD", "POL", "PRT", "ROU", "SVK", "SVN", "ESP", "SWE", "GBR", "CHE"),  selected = 29)
renderPlot({
ggplot(data = input$Diabetes_unique, mapping = aes(x = year, y = prop_diabetes, color = sex)) +
geom_line() +
labs(title = "Evolution of diabetes prevalence in Belgium", x = "Year", y = "Diabetes prevalence") +
scale_y_continuous(labels = scales::percent)
})
# Plotting the evolution of the prevalence of diabetes for each country
Diabetes_EU2 <- Diabetes_EU[-c(2)] # remove ISO country code
Diabetes_unique <- unique(Diabetes_EU2[c("country")]) # Sorting table by country (unique)
View(Diabetes_EU2)
library(tidyverse)
library(lubridate)
Diabetes_unique<-as.data.frame(Diabetes_unique)
View(Diabetes_unique)
Diabetes_unique <- unique(Diabetes_EU2[c("country")]) # Sorting table by country (unique)
View(Diabetes_unique)
# Plotting the evolution of the prevalence of diabetes for each country
Diabetes_EU2 <- Diabetes_EU[-c(2)] # remove ISO country code
Diabetes_unique <- unique(Diabetes_EU2[c("country")]) # Sorting table by country (unique)
View(Diabetes_unique)
Diabetes <- read_csv(here::here("data/Diabetes.csv"))
EU <- c("AUT", "BEL", "BGR", "HRV", "CYP", "CZE", "DNK", "EST", "FIN", "FRA", "DEU", "GRC", "HUN", "IRL", "ITA", "LVA", "LTU", "LUX", "MLT", "NLD", "POL", "PRT", "ROU", "SVK", "SVN", "ESP", "SWE", "GBR", "CHE")
Diabetes <- subset(Diabetes, Year >= 2000 , Year <=2013)
Diabetes_EU<-Diabetes[Diabetes$`ISO` %in% EU,]
Diabetes_EU <- Diabetes_EU[-c(6,7)]
colnames(Diabetes_EU)<-c("country","ISO","sex","year","prop_diabetes")
Diabetes_EU_men <-subset(Diabetes_EU, sex=="Men")
Diabetes_EU_women <-subset(Diabetes_EU, sex=="Women")
colnames(Diabetes_EU_men)<-c("country","country_code","sex","year","prop_men_diabetes")
colnames(Diabetes_EU_women)<-c("country","country_code","sex","year","prop_women_diabetes")
Diabetes_EU_men <- Diabetes_EU_men %>%
group_by(country_code) %>%
dplyr::summarize(prop_men_diabetes = mean(prop_men_diabetes))
Diabetes_EU_women <- Diabetes_EU_women %>%
group_by(country_code) %>%
dplyr::summarize(prop_women_diabetes = mean(prop_women_diabetes))
Diabetes_unique <- unique(Diabetes_EU2[c("country")]) # Sorting table by country (unique)
View(Diabetes_unique)
# Plotting the evolution of the prevalence of diabetes for each country
Diabetes_EU2 <- Diabetes_EU[-c(2)] # remove ISO country code
# Plotting the evolution of the prevalence of diabetes for each country
Diabetes_unique <- Diabetes_EU[-c(2)] # remove ISO country code
View(Diabetes_unique)
library(tidyverse)
library(lubridate)
Diabetes_unique<-as.data.frame(Diabetes_unique)
View(Diabetes_unique)
View(Diabetes_EU2)
View(Diabetes_unique)
>>>>>>> Stashed changes
packages <- c(
"here", # for the project's organization
"tidyverse", "lubridate","readr","dplyr", "readxl","data.table", # for wrangling
"ggrepel", "gghighlight", "patchwork", "maps", "scales", "ggplot2", "plotly", "shiny", "papeR", "ggpubr", # for plotting
"leaflet", "eurostat", "sf", "geojsonsf", # for mapping
"knitr", "kableExtra", "bookdown", "rmarkdown", "parameters", "see", "factoextra", "NbClust","sjPlot", "sjmisc", "sjlabelled" # for the report
)
purrr::walk(packages, library, character.only = TRUE)
Diabetes <- read_csv(here::here("data/Diabetes.csv"))
EU <- c("AUT", "BEL", "BGR", "HRV", "CYP", "CZE", "DNK", "EST", "FIN", "FRA", "DEU", "GRC", "HUN", "IRL", "ITA", "LVA", "LTU", "LUX", "MLT", "NLD", "POL", "PRT", "ROU", "SVK", "SVN", "ESP", "SWE", "GBR", "CHE")
Diabetes <- subset(Diabetes, Year >= 2000 , Year <=2013)
Diabetes_EU<-Diabetes[Diabetes$`ISO` %in% EU,]
Diabetes_EU <- Diabetes_EU[-c(6,7)]
colnames(Diabetes_EU)<-c("country","ISO","sex","year","prop_diabetes")
Diabetes_EU_men <-subset(Diabetes_EU, sex=="Men")
Diabetes_EU_women <-subset(Diabetes_EU, sex=="Women")
colnames(Diabetes_EU_men)<-c("country","country_code","sex","year","prop_men_diabetes")
colnames(Diabetes_EU_women)<-c("country","country_code","sex","year","prop_women_diabetes")
Diabetes_EU_men <- Diabetes_EU_men %>%
group_by(country_code) %>%
dplyr::summarize(prop_men_diabetes = mean(prop_men_diabetes))
Diabetes_EU_women <- Diabetes_EU_women %>%
group_by(country_code) %>%
dplyr::summarize(prop_women_diabetes = mean(prop_women_diabetes))
# Plotting the evolution of the prevalence of diabetes for each country
Diabetes_unique <- Diabetes_EU[-c(2)] # remove ISO country code
library(tidyverse)
library(lubridate)
Diabetes_unique<-as.data.frame(Diabetes_unique)
selectInput("prop_diabetes", label = "countries:",
choices =EU <- c("AUT", "BEL", "BGR", "HRV", "CYP", "CZE", "DNK", "EST", "FIN", "FRA", "DEU", "GRC", "HUN", "IRL", "ITA", "LVA", "LTU", "LUX", "MLT", "NLD", "POL", "PRT", "ROU", "SVK", "SVN", "ESP", "SWE", "GBR", "CHE"),  selected = 29)
renderPlot({
ggplot(data = Diabetes_unique, mapping = aes(x = year, y = input$prop_diabetes)) +
geom_line() +
labs(title = "Evolution of diabetes prevalence in Belgium", x = "Year", y = "Diabetes prevalence") +
scale_y_continuous(labels = scales::percent)
})
View(Diabetes_unique)
View(Diabetes_unique)
View(Diabetes_unique)
class(Diabetes_unique$prop_diabetes)
class(Diabetes_unique$year)
library(patchwork)
slices <- c(cl1[1, 5], cl1[1, 6], cl1[1, 7], cl1[1, 8])
styler:::set_style_transformers()
install.packages("styler")
install.packages("styler")
# install.packages("remotes")
remotes::install_github("r-lib/styler")
1
```{r}
styler:::style_active_file()
# install.packages("remotes")
remotes::install_github("r-lib/styler")
styler:::set_style_transformers()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
