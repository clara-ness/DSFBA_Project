setDT(daily_caloric)[ , Calories_from_plant_protein := mean(`Calories from plant protein (FAO (2017))`), by = "Entity"]
setDT(daily_caloric)[ , Calories_from_carbohydrates := mean(`Calories from carbohydrates (FAO (2017))`), by = "Entity"]
setDT(daily_caloric)[ , Calories_from_fat := mean(`Calories from fat (FAO (2017))`), by = "Entity"]
Caloric_consumption <- data.table(daily_caloric$Entity,daily_caloric$Code,daily_caloric$Calories_from_animal_protein, daily_caloric$Calories_from_plant_protein,daily_caloric$Calories_from_carbohydrates,daily_caloric$Calories_from_fat)
Caloric_consumption <-Caloric_consumption[!duplicated(Caloric_consumption)]
Caloric_consumption <- Caloric_consumption[,-1]
colnames(Caloric_consumption) <- c("country_code", "cal_prot_animal", "cal_prot_plant", "cal_carbs","cal_fat")
Caloric_consumption <-Caloric_consumption %>%
group_by(country_code) %>%
mutate(
total_consumption = sum(c(cal_prot_animal,cal_prot_plant,cal_carbs,cal_fat)))
kbl(Caloric_consumption,
caption = "**Table 1**: Caloric Consumption",
col.names = c('Country Code', 'Calories from animal protein', 'Calories from plant protein','Calories from carbohydrates', 'Calories from fat', 'Total consumption'),
align = c('cccccc')) %>%
kable_classic(full_width = T, html_font = "Cambria") %>%
kable_styling(bootstrap_options = c('striped', 'hover', 'condensed'))
GDP <- read_excel(here::here("data/GDP(1960-2020).xls"))
colnames(GDP) <- GDP[3,]
GDP <- GDP[-c(1:3),-c(3:44,59:65)]
GDP <- GDP[GDP$"Country Code" %in% EU,]
GDP <- GDP %>% pivot_longer(c('2000','2001','2002','2003','2004','2005','2006','2007','2008','2009','2010','2011','2012','2013'),names_to = "Year",values_to = "Gross Domestic Product")
colnames(GDP) <- c("country_name","country_code","year","avg_gdp")
GDP$avg_gdp <- as.numeric(GDP$avg_gdp)/1000000000
GDP_summarized <- GDP %>%
group_by(country_name, country_code) %>%
summarize(avg_gdp = mean(avg_gdp))
kbl(GDP_summarized,
caption = "**Table 2**: GDP",
col.names = c('Country Name', 'Country Code', 'Average GDP'),
align = c('cccccc')) %>%
kable_classic(full_width = T, html_font = "Cambria") %>%
kable_styling(bootstrap_options = c('striped', 'hover', 'condensed'))
Diabetes <- read_csv(here::here("data/Diabetes.csv"))
Diabetes <- subset(Diabetes, Year >= 2000 , Year <=2013)
Diabetes_EU<-Diabetes[Diabetes$`ISO` %in% EU,]
Diabetes_EU <- Diabetes_EU[-c(6,7)]
colnames(Diabetes_EU)<-c("country","ISO","sex","year","prop_diabetes")
Diabetes_EU_men <-subset(Diabetes_EU, sex=="Men")
Diabetes_EU_women <-subset(Diabetes_EU, sex=="Women")
colnames(Diabetes_EU_men)<-c("country","country_code","sex","year","prop_men_diabetes")
colnames(Diabetes_EU_women)<-c("country","country_code","sex","year","prop_women_diabetes")
Diabetes_EU_men <- Diabetes_EU_men %>%
group_by(country_code) %>%
summarize(prop_men_diabetes = mean(prop_men_diabetes))
kbl(Diabetes_EU_men,
caption = "**Table 3**: Diabetes men",
col.names = c('Country Code', 'Diabetes rates'),
align = c('cccccc')) %>%
kable_classic(full_width = T, html_font = "Cambria") %>%
kable_styling(bootstrap_options = c('striped', 'hover', 'condensed'))
Diabetes_EU_women <- Diabetes_EU_women %>%
group_by(country_code) %>%
summarize(prop_women_diabetes = mean(prop_women_diabetes))
kbl(Diabetes_EU_men,
caption = "**Table 4**: Diabetes women",
col.names = c('Country Code', 'Diabetes rates'),
align = c('cccccc')) %>%
kable_classic(full_width = T, html_font = "Cambria") %>%
kable_styling(bootstrap_options = c('striped', 'hover', 'condensed'))
GDP_diabetes_cal <-full_join(GDP_summarized,Diabetes_EU_men, by="country_code")
GDP_diabetes_cal <-full_join(GDP_diabetes_cal,Diabetes_EU_women, by="country_code")
GDP_diabetes_cal <-full_join(GDP_diabetes_cal ,Caloric_consumption, by="country_code")
kbl(GDP_diabetes_cal,
caption = "**Finale Dataset**: GDP, diabetes and calories",
col.names = c('Country Name','Country Code','GDP','Men Diabetes', 'Women Diabetes', 'Calories from animal protein', 'Calories from plant protein','Calories from carbohydrates', 'Calories from fat', 'Total consumption'),
align = c('cccccc')) %>%
kable_classic(full_width = T, html_font = "Cambria") %>%
kable_styling(bootstrap_options = c('striped', 'hover', 'condensed'))
cal_unique <- unique(daily_caloric, by =c('Entity')) # Sorting table by entity (unique)
for (i in 1:nrow(cal_unique)) { # Loop for each entity
tmp <- cal_unique$Entity[i]     # Getting the entity name i
# Taking subset of data table for the chosen entity i
tmp <- subset(daily_caloric,Entity == tmp, select = c("Year","Calories from animal protein (FAO (2017))","Calories from plant protein (FAO (2017))","Calories from fat (FAO (2017))","Calories from carbohydrates (FAO (2017))"))
# Melting the data by years (i.e. getting each value for the different rows for each year)
tmp <- melt(tmp ,  id.vars = 'Year', variable.name = 'Series')
# Print plot
print(ggplot(tmp, aes(Year,value)) + geom_line(aes(colour = Series),size = 2) +
labs(title = paste("Caloric consumption per year",cal_unique$Entity[i]),
y = "Calories", x = "Year"))
}
cal_unique <- unique(daily_caloric, by =c('Entity')) # Sorting table by entity (unique)
for (i in 1:nrow(cal_unique)) { # Loop for each entity
tmp <- cal_unique$Entity[i]     # Getting the entity name i
# Taking subset of data table for the chosen entity i
tmp <- subset(daily_caloric,Entity == tmp, select = c("Year","Calories from animal protein (FAO (2017))","Calories from plant protein (FAO (2017))","Calories from fat (FAO (2017))","Calories from carbohydrates (FAO (2017))"))
# Melting the data by years (i.e. getting each value for the different rows for each year)
tmp <- melt(tmp ,  id.vars = 'Year', variable.name = 'Series')
# Print plot
p <- print(ggplot(tmp, aes(Year,value)) + geom_line(aes(colour = Series),size = 2) +
labs(title = paste("Caloric consumption per year",cal_unique$Entity[i]),
y = "Calories", x = "Year"))
ggplotly(p)
}
install.packages("plotly")
library(ggplot2)
library(plotly)
# Plotting the evolution of the macronutrients consumption over the years for each country
cal_unique <- unique(daily_caloric, by =c('Entity')) # Sorting table by entity (unique)
for (i in 1:nrow(cal_unique)) { # Loop for each entity
tmp <- cal_unique$Entity[i]     # Getting the entity name i
# Taking subset of data table for the chosen entity i
tmp <- subset(daily_caloric,Entity == tmp, select = c("Year","Calories from animal protein (FAO (2017))","Calories from plant protein (FAO (2017))","Calories from fat (FAO (2017))","Calories from carbohydrates (FAO (2017))"))
# Melting the data by years (i.e. getting each value for the different rows for each year)
tmp <- melt(tmp ,  id.vars = 'Year', variable.name = 'Series')
# Print plot
p <- print(ggplot(tmp, aes(Year,value)) + geom_line(aes(colour = Series),size = 2) +
labs(title = paste("Caloric consumption per year",cal_unique$Entity[i]),
y = "Calories", x = "Year"))
ggplotly(p)
}
library(ggplot2)
library(plotly)
# Plotting the evolution of the macronutrients consumption over the years for each country
cal_unique <- unique(daily_caloric, by =c('Entity')) # Sorting table by entity (unique)
for (i in 1:nrow(cal_unique)) { # Loop for each entity
tmp <- cal_unique$Entity[i]     # Getting the entity name i
# Taking subset of data table for the chosen entity i
tmp <- subset(daily_caloric,Entity == tmp, select = c("Year","Calories from animal protein (FAO (2017))","Calories from plant protein (FAO (2017))","Calories from fat (FAO (2017))","Calories from carbohydrates (FAO (2017))"))
# Melting the data by years (i.e. getting each value for the different rows for each year)
tmp <- melt(tmp ,  id.vars = 'Year', variable.name = 'Series')
# Print plot
p <- print(ggplot(tmp, aes(Year,value)) + geom_line(aes(colour = Series),size = 2) +
labs(title = paste("Caloric consumption per year",cal_unique$Entity[i]),
y = "Calories", x = "Year"))
ggplotly(p)
}
library(ggplot2)
library(plotly)
p <- ggplot(tmp, aes(Year,value)) + geom_line(aes(colour = Series),size = 2) +
labs(title = paste("Caloric consumption per year",cal_unique$Entity[i]),
y = "Calories", x = "Year")
ggplotly(p)
library(ggplot2)
library(plotly)
p <- ggplot(tmp, aes(Year,value)) + geom_line(aes(colour = Series),size = 2) +
labs(title = paste("Caloric consumption per year",cal_unique$Entity[i]),
y = "Calories", x = "Year")
ggplotly(p)
cal_unique <- unique(daily_caloric, by =c('Entity')) # Sorting table by entity (unique)
for (i in 1:nrow(cal_unique)) { # Loop for each entity
tmp <- cal_unique$Entity[i]     # Getting the entity name i
# Taking subset of data table for the chosen entity i
tmp <- subset(daily_caloric,Entity == tmp, select = c("Year","Calories from animal protein (FAO (2017))","Calories from plant protein (FAO (2017))","Calories from fat (FAO (2017))","Calories from carbohydrates (FAO (2017))"))
# Melting the data by years (i.e. getting each value for the different rows for each year)
tmp <- melt(tmp ,  id.vars = 'Year', variable.name = 'Series')
# Print plot
print(ggplot(tmp, aes(Year,value)) + geom_line(aes(colour = Series),size = 2) +
labs(title = paste("Caloric consumption per year",cal_unique$Entity[i]),
y = "Calories", x = "Year"))
}
cal_unique <- unique(daily_caloric, by =c('Entity')) # Sorting table by entity (unique)
for (i in 1:nrow(cal_unique)) { # Loop for each entity
tmp <- cal_unique$Entity[i]     # Getting the entity name i
# Taking subset of data table for the chosen entity i
tmp <- subset(daily_caloric,Entity == tmp, select = c("Year","Calories from animal protein (FAO (2017))","Calories from plant protein (FAO (2017))","Calories from fat (FAO (2017))","Calories from carbohydrates (FAO (2017))"))
# Melting the data by years (i.e. getting each value for the different rows for each year)
tmp <- melt(tmp ,  id.vars = 'Year', variable.name = 'Series')
# Print plot
print(ggplot(tmp, aes(Year,value)) + geom_line(aes(colour = Series),size = 2) +
labs(title = paste("Caloric consumption per year",cal_unique$Entity[i]),
y = "Calories", x = "Year"))
}
library(ggplot2)
library(plotly)
p <- ggplot(tmp, aes(Year,value)) + geom_line(aes(colour = Series),size = 2) +
labs(title = paste("Caloric consumption per year",cal_unique$Entity[i]),
y = "Calories", x = "Year")
ggplotly(p)
#other way
install.packages("dygraphs")
library(dygraphs)
daily_caloric <- cbind("Calories from animal protein (FAO (2017))","Calories from plant protein (FAO (2017))","Calories from fat (FAO (2017))","Calories from carbohydrates (FAO (2017))")
dygraph(daily_caloric)
View(daily_caloric)
source(here::here("scripts/setup.R"))
daily_caloric <- read_csv(here::here("data/daily-caloric.csv"))
daily_caloric <- subset(daily_caloric, Year >= 2000)
EU <- c("AUT", "BEL", "BGR", "HRV", "CYP", "CZE", "DNK", "EST", "FIN", "FRA", "DEU", "GRC", "HUN", "IRL", "ITA", "LVA", "LTU", "LUX", "MLT", "NLD", "POL", "PRT", "ROU", "SVK", "SVN", "ESP", "SWE", "GBR", "CHE")
daily_caloric<-daily_caloric[daily_caloric$Code %in% EU,]
setDT(daily_caloric)[ , Calories_from_animal_protein := mean(`Calories from animal protein (FAO (2017))`), by = "Entity"]
setDT(daily_caloric)[ , Calories_from_plant_protein := mean(`Calories from plant protein (FAO (2017))`), by = "Entity"]
setDT(daily_caloric)[ , Calories_from_carbohydrates := mean(`Calories from carbohydrates (FAO (2017))`), by = "Entity"]
setDT(daily_caloric)[ , Calories_from_fat := mean(`Calories from fat (FAO (2017))`), by = "Entity"]
Caloric_consumption <- data.table(daily_caloric$Entity,daily_caloric$Code,daily_caloric$Calories_from_animal_protein, daily_caloric$Calories_from_plant_protein,daily_caloric$Calories_from_carbohydrates,daily_caloric$Calories_from_fat)
Caloric_consumption <-Caloric_consumption[!duplicated(Caloric_consumption)]
Caloric_consumption <- Caloric_consumption[,-1]
colnames(Caloric_consumption) <- c("country_code", "cal_prot_animal", "cal_prot_plant", "cal_carbs","cal_fat")
Caloric_consumption <-Caloric_consumption %>%
group_by(country_code) %>%
mutate(
total_consumption = sum(c(cal_prot_animal,cal_prot_plant,cal_carbs,cal_fat)))
kbl(Caloric_consumption,
caption = "**Table 1**: Caloric Consumption",
col.names = c('Country Code', 'Calories from animal protein', 'Calories from plant protein','Calories from carbohydrates', 'Calories from fat', 'Total consumption'),
align = c('cccccc')) %>%
kable_classic(full_width = T, html_font = "Cambria") %>%
kable_styling(bootstrap_options = c('striped', 'hover', 'condensed'))
GDP <- read_excel(here::here("data/GDP(1960-2020).xls"))
colnames(GDP) <- GDP[3,]
GDP <- GDP[-c(1:3),-c(3:44,59:65)]
GDP <- GDP[GDP$"Country Code" %in% EU,]
GDP <- GDP %>% pivot_longer(c('2000','2001','2002','2003','2004','2005','2006','2007','2008','2009','2010','2011','2012','2013'),names_to = "Year",values_to = "Gross Domestic Product")
colnames(GDP) <- c("country_name","country_code","year","avg_gdp")
GDP$avg_gdp <- as.numeric(GDP$avg_gdp)/1000000000
GDP_summarized <- GDP %>%
group_by(country_name, country_code) %>%
summarize(avg_gdp = mean(avg_gdp))
kbl(GDP_summarized,
caption = "**Table 2**: GDP",
col.names = c('Country Name', 'Country Code', 'Average GDP'),
align = c('cccccc')) %>%
kable_classic(full_width = T, html_font = "Cambria") %>%
kable_styling(bootstrap_options = c('striped', 'hover', 'condensed'))
Diabetes <- read_csv(here::here("data/Diabetes.csv"))
Diabetes <- subset(Diabetes, Year >= 2000 , Year <=2013)
Diabetes_EU<-Diabetes[Diabetes$`ISO` %in% EU,]
Diabetes_EU <- Diabetes_EU[-c(6,7)]
colnames(Diabetes_EU)<-c("country","ISO","sex","year","prop_diabetes")
Diabetes_EU_men <-subset(Diabetes_EU, sex=="Men")
Diabetes_EU_women <-subset(Diabetes_EU, sex=="Women")
colnames(Diabetes_EU_men)<-c("country","country_code","sex","year","prop_men_diabetes")
colnames(Diabetes_EU_women)<-c("country","country_code","sex","year","prop_women_diabetes")
Diabetes_EU_men <- Diabetes_EU_men %>%
group_by(country_code) %>%
summarize(prop_men_diabetes = mean(prop_men_diabetes))
kbl(Diabetes_EU_men,
caption = "**Table 3**: Diabetes men",
col.names = c('Country Code', 'Diabetes rates'),
align = c('cccccc')) %>%
kable_classic(full_width = T, html_font = "Cambria") %>%
kable_styling(bootstrap_options = c('striped', 'hover', 'condensed'))
Diabetes_EU_women <- Diabetes_EU_women %>%
group_by(country_code) %>%
summarize(prop_women_diabetes = mean(prop_women_diabetes))
kbl(Diabetes_EU_men,
caption = "**Table 4**: Diabetes women",
col.names = c('Country Code', 'Diabetes rates'),
align = c('cccccc')) %>%
kable_classic(full_width = T, html_font = "Cambria") %>%
kable_styling(bootstrap_options = c('striped', 'hover', 'condensed'))
GDP_diabetes_cal <-full_join(GDP_summarized,Diabetes_EU_men, by="country_code")
GDP_diabetes_cal <-full_join(GDP_diabetes_cal,Diabetes_EU_women, by="country_code")
GDP_diabetes_cal <-full_join(GDP_diabetes_cal ,Caloric_consumption, by="country_code")
kbl(GDP_diabetes_cal,
caption = "**Finale Dataset**: GDP, diabetes and calories",
col.names = c('Country Name','Country Code','GDP','Men Diabetes', 'Women Diabetes', 'Calories from animal protein', 'Calories from plant protein','Calories from carbohydrates', 'Calories from fat', 'Total consumption'),
align = c('cccccc')) %>%
kable_classic(full_width = T, html_font = "Cambria") %>%
kable_styling(bootstrap_options = c('striped', 'hover', 'condensed'))
View(daily_caloric)
library(dygraphs)
daily_caloric_1 <- cbind(daily_caloric$`Calories from animal protein (FAO (2017))`,daily_caloric$`Calories from plant protein (FAO (2017))`, daily_caloric$`Calories from fat (FAO (2017))`,daily_caloric$`Calories from carbohydrates (FAO (2017))`)
dygraph(daily_caloric_1)
View(daily_caloric)
View(daily_caloric_1)
dygraph(daily_caloric)
dygraph(GDP)
View(GDP_diabetes_cal)
fig <- plot_ly()
fig <- fig %>% add_pie(data = count(GDP_diabetes_cal, AUT), labels = ~AUT, values = ~n,
name = "Cut", domain = list(row = 0, column = 0))
fig <- plot_ly()
fig <- fig %>% add_pie(data = count(GDP_diabetes_cal, cal_fat), labels = ~cal_fat, values = ~n,
name = "Cut", domain = list(row = 0, column = 0))
fig
fig <- plot_ly()
fig <- fig %>% add_pie(data = count(GDP_diabetes_cal, total_consumption), labels = ~total_consumption, values = ~n,
name = "Cut", domain = list(row = 0, column = 0))
fig
library(plotly)
library(dplyr)
GDP_diabetes_cal$country_code <- sapply(strsplit(rownames(DEU), " "), "[[", 1)
library(plotly)
library(dplyr)
GDP_diabetes_cal$country_code <- sapply(strsplit(rownames(1), " "), "[[", 1)
GDP_diabetes_cal$country_code <- sapply(strsplit(rownames(GDP_diabetes_cal), " "), "[[", 1)
df <- GDP_diabetes_cal
df <- df %>% group_by(country_code)
df <- df %>% summarize(count = n())
fig <- df %>% plot_ly(labels = ~country_code, values = ~count)
fig <- fig %>% add_pie(hole = 0.6)
fig <- fig %>% layout(title = "Donut charts using Plotly",  showlegend = F,
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
fig
GDP_diabetes_cal$total_consumption <- sapply(strsplit(rownames(GDP_diabetes_cal), " "), "[[", 1)
df <- GDP_diabetes_cal
df <- df %>% group_by(country_code)
df <- df %>% summarize(count = n())
fig <- df %>% plot_ly(labels = ~country_code, values = ~count)
fig <- fig %>% add_pie(hole = 0.6)
fig <- fig %>% layout(title = "Donut charts using Plotly",  showlegend = F,
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
fig
GDP_diabetes_cal$total_consumption <- sapply(strsplit(rownames(GDP_diabetes_cal), " "), "[[", 1)
df <- GDP_diabetes_cal
df <- df %>% group_by(total_consumption)
df <- df %>% summarize(count = n())
fig <- df %>% plot_ly(labels = ~total_consumption, values = ~count)
fig <- fig %>% add_pie(hole = 0.6)
fig <- fig %>% layout(title = "Donut charts using Plotly",  showlegend = F,
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
fig
GDP_diabetes_cal$total_consumption <- sapply(strsplit(rownames(GDP_diabetes_cal$country_name), " "), "[[", 1)
GDP_diabetes_cal$total_consumption <- sapply(strsplit(rownames(GDP_diabetes_cal$DEU), " "), "[[", 1)
GDP_diabetes_cal$total_consumption <- sapply(strsplit(rownames(DEU), " "), "[[", 1)
library(plotly)
library(dplyr)
GDP_diabetes_cal$total_consumption <- sapply(strsplit(rownames(GDP_diabetes_cal), " "), "[[", 1)
df <- GDP_diabetes_cal
df <- df %>% group_by(country_code)
df <- df %>% summarize(count = n())
fig <- df %>% plot_ly(labels = ~total_consumption, values = ~count)
fig <- fig %>% add_pie(hole = 0.6)
fig <- fig %>% layout(title = "Donut charts using Plotly",  showlegend = F,
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
fig
GDP_diabetes_cal$total_consumption <- sapply(strsplit(rownames(GDP_diabetes_cal), " "), "[[", 1)
df <- GDP_diabetes_cal
df <- df %>% group_by(country_code)
df <- df %>% summarize(count = n())
fig <- df %>% plot_ly(labels = ~total_consumption, values = ~count)
fig <- fig %>% add_pie(hole = 0.6)
fig <- fig %>% layout(title = "Donut charts using Plotly",  showlegend = F,
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
fig
GDP_diabetes_cal$total_consumption <- sapply(strsplit(rownames(GDP_diabetes_cal), " "), "[[", 1)
df <- GDP_diabetes_cal
df <- df %>% group_by(total_consumption)
df <- df %>% summarize(count = n())
fig <- df %>% plot_ly(labels = ~total_consumption, values = ~count)
fig <- fig %>% add_pie(hole = 0.6)
fig <- fig %>% layout(title = "Donut charts using Plotly",  showlegend = F,
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
fig
library(shiny)
# server: print a message when the button is clicked
server <- function(input, output) {
observeEvent(input$btn, {
print("button clicked")
})
}
# load template
shinyApp(ui = htmlTemplate("www/index.html"), server)
library(shiny)
# server: print a message when the button is clicked
server <- function(input, output) {
observeEvent(input$btn, {
print("button clicked")
})
}
library(shiny)
ui <- tagList(
tags$head(
tags$title("HTML Button Test")
),
tags$main(
tags$h1("HTML Button Test"),
tags$p("Click the button."),
tags$button(
id = "btn",
class = "shiny-bound-input action-button",
"My Button"
)
)
)
cor(GDP_diabetes_cal$avg_gdp, GDP_diabetes_cal$total_consumption)
View(GDP_diabetes_cal)
GDP_diabetes_cal$total_consumption <- as.numeric(GDP_diabetes_cal$total_consumption)
cor(GDP_diabetes_cal$avg_gdp, GDP_diabetes_cal$total_consumption)
lm(GDP_diabetes_cal$avg_gdp ~ GDP_diabetes_cal$total_consumption, data = GDP_diabetes_cal)
lm(GDP_diabetes_cal ~ GDP_diabetes_cal$total_consumption, data = GDP_diabetes_cal)
lm(GDP_diabetes_cal$country_code ~ GDP_diabetes_cal$cal_prot_animal + GDP_diabetes_cal$cal_prot_plant + GDP_diabetes_cal$cal_carbs + GDP_diabetes_cal$cal_fat, data = GDP_diabetes_cal)
lm_cal =lm(GDP_diabetes_cal$country_code ~ GDP_diabetes_cal$cal_prot_animal + GDP_diabetes_cal$cal_prot_plant + GDP_diabetes_cal$cal_carbs + GDP_diabetes_cal$cal_fat, data = GDP_diabetes_cal)
sumary(lm_cal)
summary(lm_cal)
library(tidyverse)  # data manipulation
library(cluster)    # clustering algorithms
library(cluster)    # clustering algorithms
library(factoextra) # clustering algorithms & visualization
distance <- get_dist(GDP_diabetes_cal)
fviz_dist(distance, gradient = list(low = "#00AFBB", mid = "white", high = "#FC4E07"))
#Elbow Method for finding the optimal number of clusters
set.seed(123)
# Compute and plot wss for k = 2 to k = 15.
k.max <- 15
data <- GDP_diabetes_cal
wss <- sapply(1:k.max,
function(k){kmeans(data, k, nstart=50,iter.max = 15 )$tot.withinss})
distance <- dist(GDP_diabetes_cal$avg_gdp, method = "euclidean")
distance
model <- kmeans(GDP_diabetes_cal, centers = 3)
source(here::here("scripts/setup.R"))
daily_caloric <- read_csv(here::here("data/daily-caloric.csv"))
daily_caloric <- subset(daily_caloric, Year >= 2000)
EU <- c("AUT", "BEL", "BGR", "HRV", "CYP", "CZE", "DNK", "EST", "FIN", "FRA", "DEU", "GRC", "HUN", "IRL", "ITA", "LVA", "LTU", "LUX", "MLT", "NLD", "POL", "PRT", "ROU", "SVK", "SVN", "ESP", "SWE", "GBR", "CHE")
daily_caloric<-daily_caloric[daily_caloric$Code %in% EU,]
setDT(daily_caloric)[ , Calories_from_animal_protein := mean(`Calories from animal protein (FAO (2017))`), by = "Entity"]
setDT(daily_caloric)[ , Calories_from_plant_protein := mean(`Calories from plant protein (FAO (2017))`), by = "Entity"]
setDT(daily_caloric)[ , Calories_from_carbohydrates := mean(`Calories from carbohydrates (FAO (2017))`), by = "Entity"]
setDT(daily_caloric)[ , Calories_from_fat := mean(`Calories from fat (FAO (2017))`), by = "Entity"]
Caloric_consumption <- data.table(daily_caloric$Entity,daily_caloric$Code,daily_caloric$Calories_from_animal_protein, daily_caloric$Calories_from_plant_protein,daily_caloric$Calories_from_carbohydrates,daily_caloric$Calories_from_fat)
Caloric_consumption <-Caloric_consumption[!duplicated(Caloric_consumption)]
Caloric_consumption <- Caloric_consumption[,-1]
colnames(Caloric_consumption) <- c("country_code", "cal_prot_animal", "cal_prot_plant", "cal_carbs","cal_fat")
Caloric_consumption <-Caloric_consumption %>%
group_by(country_code) %>%
mutate(
total_consumption = sum(c(cal_prot_animal,cal_prot_plant,cal_carbs,cal_fat)))
Caloric_consumption$total_consumption <- as.numeric(Caloric_consumption$total_consumption)
kbl(Caloric_consumption,
caption = "**Table 1**: Caloric Consumption",
col.names = c('Country Code', 'Calories from animal protein', 'Calories from plant protein','Calories from carbohydrates', 'Calories from fat', 'Total consumption'),
align = c('cccccc')) %>%
kable_classic(full_width = T, html_font = "Cambria") %>%
kable_styling(bootstrap_options = c('striped', 'hover', 'condensed'))
GDP <- read_excel(here::here("data/GDP(1960-2020).xls"))
colnames(GDP) <- GDP[3,]
GDP <- GDP[-c(1:3),-c(3:44,59:65)]
GDP <- GDP[GDP$"Country Code" %in% EU,]
GDP <- GDP %>% pivot_longer(c('2000','2001','2002','2003','2004','2005','2006','2007','2008','2009','2010','2011','2012','2013'),names_to = "Year",values_to = "Gross Domestic Product")
colnames(GDP) <- c("country_name","country_code","year","avg_gdp")
GDP$avg_gdp <- as.numeric(GDP$avg_gdp)/1000000000
GDP_summarized <- GDP %>%
group_by(country_name, country_code) %>%
summarize(avg_gdp = mean(avg_gdp))
kbl(GDP_summarized,
caption = "**Table 2**: GDP",
col.names = c('Country Name', 'Country Code', 'Average GDP'),
align = c('cccccc')) %>%
kable_classic(full_width = T, html_font = "Cambria") %>%
kable_styling(bootstrap_options = c('striped', 'hover', 'condensed'))
Diabetes <- read_csv(here::here("data/Diabetes.csv"))
Diabetes <- subset(Diabetes, Year >= 2000 , Year <=2013)
Diabetes_EU<-Diabetes[Diabetes$`ISO` %in% EU,]
Diabetes_EU <- Diabetes_EU[-c(6,7)]
colnames(Diabetes_EU)<-c("country","ISO","sex","year","prop_diabetes")
Diabetes_EU_men <-subset(Diabetes_EU, sex=="Men")
Diabetes_EU_women <-subset(Diabetes_EU, sex=="Women")
colnames(Diabetes_EU_men)<-c("country","country_code","sex","year","prop_men_diabetes")
colnames(Diabetes_EU_women)<-c("country","country_code","sex","year","prop_women_diabetes")
Diabetes_EU_men <- Diabetes_EU_men %>%
group_by(country_code) %>%
summarize(prop_men_diabetes = mean(prop_men_diabetes))
kbl(Diabetes_EU_men,
caption = "**Table 3**: Diabetes men",
col.names = c('Country Code', 'Diabetes rates'),
align = c('cccccc')) %>%
kable_classic(full_width = T, html_font = "Cambria") %>%
kable_styling(bootstrap_options = c('striped', 'hover', 'condensed'))
Diabetes_EU_women <- Diabetes_EU_women %>%
group_by(country_code) %>%
summarize(prop_women_diabetes = mean(prop_women_diabetes))
kbl(Diabetes_EU_men,
caption = "**Table 4**: Diabetes women",
col.names = c('Country Code', 'Diabetes rates'),
align = c('cccccc')) %>%
kable_classic(full_width = T, html_font = "Cambria") %>%
kable_styling(bootstrap_options = c('striped', 'hover', 'condensed'))
GDP_diabetes_cal <-full_join(GDP_summarized,Diabetes_EU_men, by="country_code")
GDP_diabetes_cal <-full_join(GDP_diabetes_cal,Diabetes_EU_women, by="country_code")
GDP_diabetes_cal <-full_join(GDP_diabetes_cal ,Caloric_consumption, by="country_code")
kbl(GDP_diabetes_cal,
caption = "**Finale Dataset**: GDP, diabetes and calories",
col.names = c('Country Name','Country Code','GDP','Men Diabetes', 'Women Diabetes', 'Calories from animal protein', 'Calories from plant protein','Calories from carbohydrates', 'Calories from fat', 'Total consumption'),
align = c('cccccc')) %>%
kable_classic(full_width = T, html_font = "Cambria") %>%
kable_styling(bootstrap_options = c('striped', 'hover', 'condensed'))
View(GDP_diabetes_cal)
View(GDP_diabetes_cal)
data_1 <-colnames(GDP_diabetes_cal) <- c(EU)
data_1 <-colnames(GDP_diabetes_cal) <- ("AUT", "BEL", "BGR", "HRV", "CYP", "CZE", "DNK", "EST", "FIN", "FRA", "DEU","GRC", "HUN", "IRL", "ITA", "LVA", "LTU", "LUX", "MLT", "NLD", "POL", "PRT", "ROU", "SVK", "SVN", "ESP", "SWE", "GBR", "CHE")
data_1 <-colnames(GDP_diabetes_cal) <- (AUT, BEL, BGR, HRV, CYP, CZE, DNK, EST, FIN, FRA, DEU,GRC, HUN, IRL, ITA, LVA, LTU, LUX, MLT, NLD, POL, PRT, ROU, SVK, SVN, ESP, SWE, GBR, CHE)
data_1 <-colnames(GDP_diabetes_cal) <- c(AUT, BEL, BGR, HRV, CYP, CZE, DNK, EST, FIN, FRA, DEU,GRC, HUN, IRL, ITA, LVA, LTU, LUX, MLT, NLD, POL, PRT, ROU, SVK, SVN, ESP, SWE, GBR, CHE)
data_1 <-colnames(GDP_diabetes_cal) <- c("AUT", "BEL", "BGR", "HRV", "CYP", "CZE", "DNK", "EST", "FIN", "FRA", "DEU","GRC", "HUN", "IRL", "ITA", "LVA", "LTU", "LUX", "MLT", "NLD", "POL", "PRT", "ROU", "SVK", "SVN", "ESP", "SWE", "GBR", "CHE")
data_1 <-rownames(GDP_diabetes_cal) <- c("AUT", "BEL", "BGR", "HRV", "CYP", "CZE", "DNK", "EST", "FIN", "FRA", "DEU","GRC", "HUN", "IRL", "ITA", "LVA", "LTU", "LUX", "MLT", "NLD", "POL", "PRT", "ROU", "SVK", "SVN", "ESP", "SWE", "GBR", "CHE")
rownames(GDP_diabetes_cal) <- c("AUT", "BEL", "BGR", "HRV", "CYP", "CZE", "DNK", "EST", "FIN", "FRA", "DEU","GRC", "HUN", "IRL", "ITA", "LVA", "LTU", "LUX", "MLT", "NLD", "POL", "PRT", "ROU", "SVK", "SVN", "ESP", "SWE", "GBR", "CHE")
View(GDP_diabetes_cal)
data_1 <- GDP_diabetes_cal[,-(1:2),drop=FALSE]
View(data_1)
model <- kmeans(data_1, centers = 3)
# displays the class determined by
# the model for all observations:
model$cluster
Data_cluster <- data.frame(data_1,
cluster = as.factor(model$cluster)
)
head(Data_cluster)
library(parameters)
#prediction of cluster
install.packages('parameters')
library(parameters)
res_kmeans <- cluster_analysis(data_1,
n = 3,
method = "kmeans")
predict(res_kmeans) # get clusters
plot(res_kmeans)
install.packages('see')
install.packages("see")
library(see)
library(parameters)
res_kmeans <- cluster_analysis(data_1,
n = 3,
method = "kmeans")
predict(res_kmeans) # get clusters
plot(res_kmeans)
