lm_gdp_diabetes_men2 <- lm(GDP_diabetes_cal2$avg_gdp ~ GDP_diabetes_cal2$prop_men_diabetes)
kable(prettify(summary(lm_gdp_diabetes_women2)))
kable(prettify(summary(lm_gdp_diabetes_men2)))
data_1 <- GDP_diabetes_cal[,-(1:2),drop=FALSE]
rownames(data_1) <- c("AUT", "BEL", "BGR", "HRV", "CYP", "CZE", "DNK", "EST", "FIN", "FRA", "DEU","GRC", "HUN", "IRL", "ITA", "LVA", "LTU", "LUX", "MLT", "NLD", "POL", "PRT", "ROU", "SVK", "SVN", "ESP", "SWE", "GBR", "CHE")
fviz_nbclust(data_1, kmeans, method = "wss") +
geom_vline(xintercept = 3, linetype = 2) + # add line for better visualisation
labs(subtitle = "Elbow method") # add subtitle
set.seed(123)
model_cluster <- kmeans(data_1, centers = 3, nstart = 10)
#model_cluster_centers <- model_cluster$centers
#model_cluster_centers <- sort(model_cluster_centers)
#ordered_model_cluster <- kmeans(model_cluster, centers = model_cluster_centers)
Data_cluster <- data.frame(data_1,
cluster = as.factor(model_cluster$cluster)) #but with ordered_model_cluster$cluster in paranthesis
countries_cluster_1 <- filter(Data_cluster, cluster == "1")
countries_cluster_2 <- filter(Data_cluster, cluster == "2")
countries_cluster_3 <- filter(Data_cluster, cluster == "3")
kable(countries_cluster_1)
kable(countries_cluster_2)
kable(countries_cluster_3)
res_kmeans <- cluster_analysis(data_1, n=3, method = "kmeans",iterations = 20)
predict(res_kmeans)
plot(res_kmeans)
set.seed(123)
model_cluster <- kmeans(data_1, centers = 3, nstart = 10)
#model_cluster_centers <- model_cluster$centers
#model_cluster_centers <- sort(model_cluster_centers)
#ordered_model_cluster <- kmeans(model_cluster, centers = model_cluster_centers)
Data_cluster <- data.frame(data_1,
cluster = as.factor(model_cluster$cluster)) #but with ordered_model_cluster$cluster in paranthesis
countries_cluster_1 <- filter(Data_cluster, cluster == "1")
countries_cluster_2 <- filter(Data_cluster, cluster == "2")
countries_cluster_3 <- filter(Data_cluster, cluster == "3")
kable(countries_cluster_1)
kable(countries_cluster_2)
kable(countries_cluster_3)
set.seed(123)
model_cluster <- kmeans(data_1, centers = 3, nstart = 10)
Data_cluster <- data.frame(data_1,
cluster = as.factor(model_cluster$cluster))
countries_cluster_1 <- filter(Data_cluster, cluster == "1")
countries_cluster_2 <- filter(Data_cluster, cluster == "2")
countries_cluster_3 <- filter(Data_cluster, cluster == "3")
kable(countries_cluster_1)
kable(countries_cluster_2)
kable(countries_cluster_3)
cor(countries_cluster_1$gdp_per_person, countries_cluster_1$total_consumption)
cor(countries_cluster_2$gdp_per_person, countries_cluster_2$total_consumption)
cor(countries_cluster_3$gdp_per_person, countries_cluster_3$total_consumption)
lm_gdp_total_cal_clust1 <- lm(countries_cluster_1$gdp_per_person ~ countries_cluster_1$total_consumption)
lm_gdp_total_cal_clust2 <- lm(countries_cluster_2$gdp_per_person ~ countries_cluster_2$total_consumption)
lm_gdp_total_cal_clust3 <- lm(countries_cluster_3$gdp_per_person ~ countries_cluster_3$total_consumption)
kable(prettify(summary(lm_gdp_total_cal_clust1)))
kable(prettify(summary(lm_gdp_total_cal_clust2)))
kable(prettify(summary(lm_gdp_total_cal_clust3)))
#with avg_gdp
cor(countries_cluster_1$avg_gdp, countries_cluster_1$total_consumption)
cor(countries_cluster_2$avg_gdp, countries_cluster_2$total_consumption)
cor(countries_cluster_3$avg_gdp, countries_cluster_3$total_consumption)
lm_avggdp_total_cal_clust1 <- lm(countries_cluster_1$avg_gdp ~ countries_cluster_1$total_consumption)
lm_avggdp_total_cal_clust2 <- lm(countries_cluster_2$avg_gdp ~ countries_cluster_2$total_consumption)
lm_avggdp_total_cal_clust3 <- lm(countries_cluster_3$avg_gdp ~ countries_cluster_3$total_consumption)
kable(prettify(summary(lm_avggdp_total_cal_clust1)))
kable(prettify(summary(lm_avggdp_total_cal_clust1)))
kable(prettify(summary(lm_avggdp_total_cal_clust1)))
cor(GDP_diabetes_cal$avg_gdp,GDP_diabetes_cal$cal_prot_animal)
cor(GDP_diabetes_cal$avg_gdp,GDP_diabetes_cal$cal_prot_plant)
cor(GDP_diabetes_cal$avg_gdp,GDP_diabetes_cal$cal_carbs)
cor(GDP_diabetes_cal$avg_gdp,GDP_diabetes_cal$cal_fat)
lm_gdp_cal_prot_animal <- lm(GDP_diabetes_cal$avg_gdp ~ GDP_diabetes_cal$cal_prot_animal)
lm_gdp_cal_prot_plant <- lm(GDP_diabetes_cal$avg_gdp ~ GDP_diabetes_cal$cal_prot_plant)
lm_gdp_cal_carbs <- lm(GDP_diabetes_cal$avg_gdp ~ GDP_diabetes_cal$cal_carbs)
lm_gdp_cal_fat <- lm(GDP_diabetes_cal$avg_gdp ~ GDP_diabetes_cal$cal_fat)
kable(prettify(summary(lm_gdp_cal_prot_animal)))
kable(prettify(summary(lm_gdp_cal_prot_plant)))
kable(prettify(summary(lm_gdp_cal_carbs)))
kable(prettify(summary(lm_gdp_cal_fat)))
#with GDP per person
ggplot() +
geom_point(data = GDP_diabetes_cal, aes(x = gdp_per_person, y = cal_fat), color = "blue") +
geom_smooth(mapping = aes(x = GDP_diabetes_cal$gdp_per_person, y=GDP_diabetes_cal$cal_fat), color = "blue", method = "lm") +
labs(x = "GDP per capita", y= "Calories from fat")
ggplot() +
geom_point(data = GDP_diabetes_cal, aes(x = gdp_per_person, y = cal_carbs), color = "purple") +
geom_smooth(mapping = aes(x = GDP_diabetes_cal$gdp_per_person, y=GDP_diabetes_cal$cal_carbs), color = "purple", method = "lm") +
labs(x = "GDP per capita", y= "Calories from carbs")
ggplot() +
geom_point(data = GDP_diabetes_cal, aes(x = gdp_per_person, y = cal_prot_animal), color = "red") +
geom_smooth(mapping = aes(x = GDP_diabetes_cal$gdp_per_person, y=GDP_diabetes_cal$cal_prot_animal), color = "red", method = "lm") +
labs(x = "GDP per capita", y= "Calories from animal protein")
ggplot() +
geom_point(data = GDP_diabetes_cal, aes(x = gdp_per_person, y = cal_prot_plant), color = "green") +
geom_smooth(mapping = aes(x = GDP_diabetes_cal$gdp_per_person, y=GDP_diabetes_cal$cal_prot_plant), color = "green", method = "lm") +
labs(x = "GDP per capita", y= "Calories from plant protein")
#correlation and linear regression
cor(GDP_diabetes_cal$gdp_per_person,GDP_diabetes_cal$cal_prot_animal)
cor(GDP_diabetes_cal$gdp_per_person,GDP_diabetes_cal$cal_prot_plant)
cor(GDP_diabetes_cal$gdp_per_person,GDP_diabetes_cal$cal_carbs)
cor(GDP_diabetes_cal$gdp_per_person,GDP_diabetes_cal$cal_fat)
lm_gdp_pp_cal_prot_animal <- lm(GDP_diabetes_cal$gdp_per_person ~ GDP_diabetes_cal$cal_prot_animal)
lm_gdp_pp_cal_prot_plant <- lm(GDP_diabetes_cal$gdp_per_person ~ GDP_diabetes_cal$cal_prot_plant)
lm_gdp_pp_cal_carbs <- lm(GDP_diabetes_cal$gdp_per_person ~ GDP_diabetes_cal$cal_carbs)
lm_gdp_pp_cal_fat <- lm(GDP_diabetes_cal$gdp_per_person ~ GDP_diabetes_cal$cal_fat)
kable(prettify(summary(lm_gdp_pp_cal_prot_animal)))
kable(prettify(summary(lm_gdp_pp_cal_prot_plant)))
kable(prettify(summary(lm_gdp_pp_cal_carbs)))
kable(prettify(summary(lm_gdp_pp_cal_fat)))
View(countries_cluster_1)
View(data_1)
View(GDP_diabetes_cal)
source(here::here("scripts/setup.R"))
daily_caloric <- read_csv(here::here("data/daily-caloric.csv"))
daily_caloric <- subset(daily_caloric, Year >= 2000)
EU <- c("AUT", "BEL", "BGR", "HRV", "CYP", "CZE", "DNK", "EST", "FIN", "FRA", "DEU", "GRC", "HUN", "IRL", "ITA", "LVA", "LTU", "LUX", "MLT", "NLD", "POL", "PRT", "ROU", "SVK", "SVN", "ESP", "SWE", "GBR", "CHE")
daily_caloric<-daily_caloric[daily_caloric$Code %in% EU,]
setDT(daily_caloric)[ , Calories_from_animal_protein := mean(`Calories from animal protein (FAO (2017))`), by = "Entity"]
setDT(daily_caloric)[ , Calories_from_plant_protein := mean(`Calories from plant protein (FAO (2017))`), by = "Entity"]
setDT(daily_caloric)[ , Calories_from_carbohydrates := mean(`Calories from carbohydrates (FAO (2017))`), by = "Entity"]
setDT(daily_caloric)[ , Calories_from_fat := mean(`Calories from fat (FAO (2017))`), by = "Entity"]
Caloric_consumption <- data.table(daily_caloric$Entity,daily_caloric$Code,daily_caloric$Calories_from_animal_protein, daily_caloric$Calories_from_plant_protein,daily_caloric$Calories_from_carbohydrates,daily_caloric$Calories_from_fat)
Caloric_consumption <-Caloric_consumption[!duplicated(Caloric_consumption)]
Caloric_consumption <- Caloric_consumption[,-1]
colnames(Caloric_consumption) <- c("country_code", "cal_prot_animal", "cal_prot_plant", "cal_carbs","cal_fat")
Caloric_consumption <-Caloric_consumption %>%
group_by(country_code) %>%
mutate(
total_consumption = sum(c(cal_prot_animal,cal_prot_plant,cal_carbs,cal_fat)))
Caloric_consumption$total_consumption <- as.numeric(Caloric_consumption$total_consumption)
kbl(Caloric_consumption,
caption = "**Table 1**: Caloric Consumption",
col.names = c('Country Code', 'Calories from animal protein', 'Calories from plant protein','Calories from carbohydrates', 'Calories from fat', 'Total consumption'),
align = c('cccccc')) %>%
kable_classic(full_width = T, html_font = "Cambria") %>%
kable_styling(bootstrap_options = c('striped', 'hover', 'condensed'))
GDP <- read_excel(here::here("data/GDP(1960-2020).xls"))
colnames(GDP) <- GDP[3,]
GDP <- GDP[-c(1:3),-c(3:44,59:65)]
GDP <- GDP[GDP$"Country Code" %in% EU,]
GDP <- GDP %>% pivot_longer(c('2000','2001','2002','2003','2004','2005','2006','2007','2008','2009','2010','2011','2012','2013'),names_to = "Year",values_to = "Gross Domestic Product")
colnames(GDP) <- c("country_name","country_code","year","avg_gdp")
GDP$avg_gdp <- as.numeric(GDP$avg_gdp)/1000000000
GDP2 <- GDP
GDP2$avg_gdp <- GDP2$avg_gdp*1000000000
GDP_summarized <- GDP %>%
group_by(country_name, country_code) %>%
dplyr::summarize(avg_gdp = mean(avg_gdp))
kbl(GDP_summarized,
caption = "**Table 2**: GDP",
col.names = c('Country Name', 'Country Code', 'Average GDP (in billion $)'),
align = c('cccccc')) %>%
kable_classic(full_width = T, html_font = "Cambria") %>%
kable_styling(bootstrap_options = c('striped', 'hover', 'condensed'))
population <- read_excel(here::here("data/population.xls"))
colnames(population) <- population[3,]
population <- population[-c(1:3),-c(3:44,59:65)]
population <- population[population$"Country Code" %in% EU,]
population <- population %>% pivot_longer(c('2000','2001','2002','2003','2004','2005','2006','2007','2008','2009','2010','2011','2012','2013'),names_to = "Year",values_to = "Total Population")
colnames(population) <- c("country_name","country_code","year","avg_population")
population$avg_population <- as.numeric(population$avg_population)
GDP2 <- mutate(GDP2, gdp_per_person = GDP2$avg_gdp/population$avg_population)
GDP_summarized2 <- GDP2 %>%
group_by(country_name, country_code) %>%
dplyr::summarize(gdp_per_person = mean(gdp_per_person))
Diabetes <- read_csv(here::here("data/Diabetes.csv"))
Diabetes <- subset(Diabetes, Year >= 2000 , Year <=2013)
Diabetes_EU<-Diabetes[Diabetes$`ISO` %in% EU,]
Diabetes_EU <- Diabetes_EU[-c(6,7)]
colnames(Diabetes_EU)<-c("country","ISO","sex","year","prop_diabetes")
Diabetes_EU_men <-subset(Diabetes_EU, sex=="Men")
Diabetes_EU_women <-subset(Diabetes_EU, sex=="Women")
colnames(Diabetes_EU_men)<-c("country","country_code","sex","year","prop_men_diabetes")
colnames(Diabetes_EU_women)<-c("country","country_code","sex","year","prop_women_diabetes")
Diabetes_EU_men <- Diabetes_EU_men %>%
group_by(country_code) %>%
dplyr::summarize(prop_men_diabetes = mean(prop_men_diabetes))
kbl(Diabetes_EU_men,
caption = "**Table 3**: Diabetes men",
col.names = c('Country Code', 'Diabetes rate'),
align = c('cccccc')) %>%
kable_classic(full_width = T, html_font = "Cambria") %>%
kable_styling(bootstrap_options = c('striped', 'hover', 'condensed'))
Diabetes_EU_women <- Diabetes_EU_women %>%
group_by(country_code) %>%
dplyr::summarize(prop_women_diabetes = mean(prop_women_diabetes))
kbl(Diabetes_EU_men,
caption = "**Table 4**: Diabetes women",
col.names = c('Country Code', 'Diabetes rate'),
align = c('cccccc')) %>%
kable_classic(full_width = T, html_font = "Cambria") %>%
kable_styling(bootstrap_options = c('striped', 'hover', 'condensed'))
GDP_diabetes_cal <- full_join(GDP_summarized,GDP_summarized2, by=c("country_name","country_code"))
GDP_diabetes_cal <-full_join(GDP_diabetes_cal,Diabetes_EU_men, by="country_code")
GDP_diabetes_cal <-full_join(GDP_diabetes_cal,Diabetes_EU_women, by="country_code")
GDP_diabetes_cal <-full_join(GDP_diabetes_cal ,Caloric_consumption, by="country_code")
kbl(GDP_diabetes_cal,
caption = "**Finale Dataset**: GDP, diabetes and calories",
col.names = c('Country Name','Country Code','Average GDP (in billion $)','GDP per person (in $)','Men Diabetes', 'Women Diabetes', 'Calories from animal protein', 'Calories from plant protein','Calories from carbohydrates', 'Calories from fat', 'Total consumption'),
align = c('cccccc')) %>%
kable_classic(full_width = T, html_font = "Cambria") %>%
kable_styling(bootstrap_options = c('striped', 'hover', 'condensed'))
ggplot(data = GDP) +
geom_point(mapping = aes(x = year, y = avg_gdp)) +
facet_wrap(~ country_name, nrow = 4) +
labs(x="Year",y="GDP (in billion $)")
ggplot(data = GDP_diabetes_cal) +
geom_point(mapping = aes(x = avg_gdp, y = prop_men_diabetes),color = "blue") +
geom_point(mapping = aes(x = avg_gdp, y = prop_women_diabetes), color = "red") +
labs(x="Average GDP (in billion $)",y="Diabetes rate")
GDP_no_outlier <- arrange(GDP_summarized, desc(GDP_summarized$avg_gdp))
GDP_no_outlier <- GDP_no_outlier[-c(1:5),]
GDP_diabetes_cal2 <- left_join(GDP_no_outlier,Diabetes_EU_men, by="country_code")
GDP_diabetes_cal2 <- left_join(GDP_diabetes_cal2,Diabetes_EU_women, by="country_code")
GDP_diabetes_cal2 <- left_join(GDP_diabetes_cal2,Caloric_consumption, by="country_code")
ggplot(data = GDP_diabetes_cal2) +
geom_point(mapping = aes(x = avg_gdp, y = prop_men_diabetes), color = "blue") +
geom_smooth(mapping = aes(x = avg_gdp, y = prop_men_diabetes), color = "blue", method = "lm") +
geom_point(mapping = aes(x = avg_gdp, y = prop_women_diabetes), color = "red") +
geom_smooth(mapping = aes(x = avg_gdp, y = prop_women_diabetes), color = "red", method = "lm") +
labs(x="Average GDP (in billion $)",y="Diabetes rate")
#Trying to put a button to display all the countires graphs
# Plotting the evolution of the macronutrients consumption over the years for each country
#cal_unique <- unique(daily_caloric, by =c('Entity')) # Sorting table by entity (unique)
#for (i in 1:nrow(cal_unique)) { # Loop for each entity
#tmp <- cal_unique$Entity[i]     # Getting the entity name i
# Taking subset of data table for the chosen entity i
#tmp <- subset(daily_caloric,Entity == tmp, select = c("Year","Calories from animal protein (FAO (2017))","Calories #from plant protein (FAO (2017))","Calories from fat (FAO (2017))","Calories from carbohydrates (FAO (2017))"))
# Melting the data by years (i.e. getting each value for the different rows for each year)
#tmp <- melt(tmp ,  id.vars = 'Year', variable.name = 'Series')
# Print plot
#print(ggplot(tmp, aes(Year,value)) + geom_line(aes(colour = Series),size = 2) +
#  labs(title = paste("Caloric consumption per year",cal_unique$Entity[i]),
#       y = "Calories", x = "Year"))
#}
#library(shiny)
#ui <- tagList(
#    tags$head(
#        tags$title("HTML Button Test")
#    ),
#    tags$main(
#        tags$h1("HTML Button Test"),
#        tags$p("Click the button."),
#        tags$button(
#            id = "btn",
#            class = "shiny-bound-input action-button",
#            "My Button"
#        )
#    )
#)
#Plotting for Austria
cal_unique <- unique(daily_caloric, by =c('Entity')) # Sorting table by entity (unique)
for (i in 1) { # Loop for each entity
tmp <- cal_unique$Entity[i]     # Getting the entity name i
# Taking subset of data table for the chosen entity i
tmp <- subset(daily_caloric,Entity == tmp, select = c("Year","Calories from animal protein (FAO (2017))","Calories from plant protein (FAO (2017))","Calories from fat (FAO (2017))","Calories from carbohydrates (FAO (2017))"))
# Melting the data by years (i.e. getting each value for the different rows for each year)
tmp <- melt(tmp ,  id.vars = 'Year', variable.name = 'Series')
# Print plot
print(ggplot(tmp, aes(Year,value)) + geom_line(aes(colour = Series),size = 2) +ylim(0,2000) +
labs(title = paste("Caloric consumption per year",cal_unique$Entity[i]),
y = "Calories", x = "Year"))
}
#Plotting for Bulgaria
cal_unique <- unique(daily_caloric, by =c('Entity')) # Sorting table by entity (unique)
for (i in 3) { # Loop for each entity
tmp <- cal_unique$Entity[i]     # Getting the entity name i
# Taking subset of data table for the chosen entity i
tmp <- subset(daily_caloric,Entity == tmp, select = c("Year","Calories from animal protein (FAO (2017))","Calories from plant protein (FAO (2017))","Calories from fat (FAO (2017))","Calories from carbohydrates (FAO (2017))"))
# Melting the data by years (i.e. getting each value for the different rows for each year)
tmp <- melt(tmp ,  id.vars = 'Year', variable.name = 'Series')
# Print plot
print(ggplot(tmp, aes(Year,value)) + geom_line(aes(colour = Series),size = 2) + ylim(0,2000) +
labs(title = paste("Caloric consumption per year",cal_unique$Entity[i]),
y = "Calories", x = "Year"))
}
ggplot() +
geom_line(data = GDP_diabetes_cal, aes(x = avg_gdp, y = total_consumption), color = "orange") +
geom_line(data = GDP_diabetes_cal, aes(x = avg_gdp, y = cal_fat), color = "blue") +
geom_line(data = GDP_diabetes_cal, aes(x = avg_gdp, y = cal_carbs), color = "purple") +
geom_line(data = GDP_diabetes_cal, aes(x = avg_gdp, y = cal_prot_animal), color = "red") +
geom_line(data = GDP_diabetes_cal, aes(x = avg_gdp, y = cal_prot_plant), color = "green") +
labs(x = "Average GDP (in billion $)", y= "Calories")
ggplot(GDP_diabetes_cal, aes(x=GDP_diabetes_cal$avg_gdp, y=GDP_diabetes_cal$total_consumption)) +
geom_point() + # Show dots
geom_text(
label= (GDP_diabetes_cal$country_code),
nudge_x = 0.25, nudge_y = 0.25,
check_overlap = T)+
geom_smooth(mapping = aes(x = GDP_diabetes_cal$avg_gdp, y=GDP_diabetes_cal$total_consumption), color = "red", method = "lm")+
labs( x = "Average GDP (in billion $)", y = "Calories")
ggplot(GDP_diabetes_cal2, aes(x=GDP_diabetes_cal2$avg_gdp, y=GDP_diabetes_cal2$total_consumption)) +
geom_point() +
geom_text(
label= (GDP_diabetes_cal2$country_code),
nudge_x = 0.25, nudge_y = 0.25,
check_overlap = T)+
geom_smooth(mapping = aes(x = GDP_diabetes_cal2$avg_gdp, y=GDP_diabetes_cal2$total_consumption), color = "red", method = "lm")+
labs(x = "Average GDP (in billion $)", y = "Calories")
# Plotting the evolution of the prevalence of diabetes for each country
#Diabetes_EU2 <- Diabetes_EU[-c(2)] #remove ISO country code
#Diabetes_unique <- unique(Diabetes_EU2[c('country')]) # Sorting table by country (unique)
#for (i in 1:nrow(Diabetes_unique)) {
#tmp <- Diabetes_unique$country[i]
# Taking subset of data table for the chosen country i
#tmp2 <- subset(Diabetes_EU2,country == tmp, select = c("sex","year","prop_diabetes"))
# Print plot for each country
#print(ggplot(data = tmp2, mapping = aes(x = year, y =prop_diabetes, color =sex)) + geom_line()
#  + labs(title = paste("Evolution of diabetes prevalence in",tmp), x= "Year", y="Diabetes prevalence") + scale_y_continuous(labels = scales::percent))
#}
# Plotting the evolution of the prevalence of diabetes for each country
Diabetes_EU2 <- Diabetes_EU[-c(2)] #remove ISO country code
Diabetes_unique <- unique(Diabetes_EU2[c('country')]) # Sorting table by country (unique)
# Taking subset of data table for the chosen country
BelgiumPlot <- subset(Diabetes_EU2,country == 'Belgium', select = c("sex","year","prop_diabetes"))
# Print plot for each country
ggplot(data = BelgiumPlot, mapping = aes(x = year, y =prop_diabetes, color =sex)) + geom_line() + labs(title ="Evolution of diabetes prevalence in Belgium", x= "Year", y="Diabetes prevalence") + scale_y_continuous(labels = scales::percent)
# Taking subset of data table for the chosen country
AustriaPlot <- subset(Diabetes_EU2,country == 'Austria', select = c("sex","year","prop_diabetes"))
# Print plot for each country
ggplot(data = AustriaPlot, mapping = aes(x = year, y =prop_diabetes, color =sex)) + geom_line() + labs(title ="Evolution of diabetes prevalence in Austria", x= "Year", y="Diabetes prevalence") + scale_y_continuous(labels = scales::percent)
# Taking subset of data table for the chosen country
CroatiaPlot <- subset(Diabetes_EU2,country == 'Croatia', select = c("sex","year","prop_diabetes"))
# Print plot for each country
ggplot(data = CroatiaPlot, mapping = aes(x = year, y =prop_diabetes, color =sex)) + geom_line() + labs(title ="Evolution of diabetes prevalence in Croatia", x= "Year", y="Diabetes prevalence") + scale_y_continuous(labels = scales::percent)
# Diabetes vs total calories
ggplot(data = GDP_diabetes_cal) +
geom_point(mapping = aes(x = total_consumption, y = prop_men_diabetes, color = "blue")) +
geom_smooth(mapping = aes(x = total_consumption, y = prop_men_diabetes, color = "blue"), formula = y ~ x, method = "lm") +
geom_point(mapping = aes(x = total_consumption, y = prop_women_diabetes, color = "red")) +
geom_smooth(mapping = aes(x = total_consumption, y = prop_women_diabetes, color = "red"), formula = y ~ x, method = "lm") +
labs(title="Diabetes vs total calories per day", x="Total calories per day", y="Diabetes prevalence") +
scale_color_manual(labels = c("Men", "Women"), values = c("blue", "red")) +
scale_y_continuous(labels = scales::percent)
# Diabetes vs calories from animal protein
ggplot(data = GDP_diabetes_cal) +
geom_point(mapping = aes(x = cal_prot_animal, y = prop_men_diabetes, color = "blue")) +
geom_smooth(mapping = aes(x = cal_prot_animal, y = prop_men_diabetes, color = "blue"), formula = y ~ x, method = "lm") +
geom_point(mapping = aes(x = cal_prot_animal, y = prop_women_diabetes, color = "red")) +
geom_smooth(mapping = aes(x = cal_prot_animal, y = prop_women_diabetes, color = "red"), formula = y ~ x, method = "lm") +
labs(title="Diabetes vs daily calories from animal protein", x="Total calories from animal protein per day", y="Diabetes prevalence") +
scale_color_manual(labels = c("Men", "Women"), values = c("blue", "red")) +
scale_y_continuous(labels = scales::percent)
# Diabetes vs calories from plant protein
ggplot(data = GDP_diabetes_cal) +
geom_point(mapping = aes(x = cal_prot_plant, y = prop_men_diabetes, color = "blue")) +
geom_smooth(mapping = aes(x = cal_prot_plant, y = prop_men_diabetes, color = "blue"), formula = y ~ x, method = "lm") +
geom_point(mapping = aes(x = cal_prot_plant, y = prop_women_diabetes, color = "red")) +
geom_smooth(mapping = aes(x = cal_prot_plant, y = prop_women_diabetes, color = "red"), formula = y ~ x, method = "lm") +
labs(title="Diabetes vs daily calories from plant protein", x="Total calories from plant protein per day", y="Diabetes prevalence") +
scale_color_manual(labels = c("Men", "Women"), values = c("blue", "red")) +
scale_y_continuous(labels = scales::percent)
# Diabetes vs calories from carbohydrates
ggplot(data = GDP_diabetes_cal) +
geom_point(mapping = aes(x = cal_carbs, y = prop_men_diabetes, color = "blue")) +
geom_smooth(mapping = aes(x = cal_carbs, y = prop_men_diabetes, color = "blue"), formula = y ~ x, method = "lm") +
geom_point(mapping = aes(x = cal_carbs, y = prop_women_diabetes, color = "red")) +
geom_smooth(mapping = aes(x = cal_carbs, y = prop_women_diabetes, color = "red"), formula = y ~ x, method = "lm") +
labs(title="Diabetes vs daily calories from carbohydrates", x="Total calories from carbohydrates per day", y="Diabetes prevalence") +
scale_color_manual(labels = c("Men", "Women"), values = c("blue", "red")) +
scale_y_continuous(labels = scales::percent)
# Diabetes vs calories from fat
ggplot(data = GDP_diabetes_cal) +
geom_point(mapping = aes(x = cal_fat, y = prop_men_diabetes, color = "blue")) +
geom_smooth(mapping = aes(x = cal_fat, y = prop_men_diabetes, color = "blue"), formula = y ~ x, method = "lm") +
geom_point(mapping = aes(x = cal_fat, y = prop_women_diabetes, color = "red")) +
geom_smooth(mapping = aes(x = cal_fat, y = prop_women_diabetes, color = "red"), formula = y ~ x, method = "lm") +
labs(title="Diabetes vs daily calories from fat", x="Total calories from fat per day", y="Diabetes prevalence") +
scale_color_manual(labels = c("Men", "Women"), values = c("blue", "red")) +
scale_y_continuous(labels = scales::percent)
# Diabetes vs total calories
ggplot(data = GDP_diabetes_cal2) +
geom_point(mapping = aes(x = total_consumption, y = prop_men_diabetes, color = "blue")) +
geom_smooth(mapping = aes(x = total_consumption, y = prop_men_diabetes, color = "blue"), formula = y ~ x, method = "lm") +
geom_point(mapping = aes(x = total_consumption, y = prop_women_diabetes, color = "red")) +
geom_smooth(mapping = aes(x = total_consumption, y = prop_women_diabetes, color = "red"), formula = y ~ x, method = "lm") +
labs(title="Diabetes vs total calories per day (without outliers)", x="Total calories per day", y="Diabetes prevalence") +
scale_color_manual(labels = c("Men", "Women"), values = c("blue", "red")) +
scale_y_continuous(labels = scales::percent)
# Diabetes vs calories from animal protein
ggplot(data = GDP_diabetes_cal2) +
geom_point(mapping = aes(x = cal_prot_animal, y = prop_men_diabetes, color = "blue")) +
geom_smooth(mapping = aes(x = cal_prot_animal, y = prop_men_diabetes, color = "blue"), formula = y ~ x, method = "lm") +
geom_point(mapping = aes(x = cal_prot_animal, y = prop_women_diabetes, color = "red")) +
geom_smooth(mapping = aes(x = cal_prot_animal, y = prop_women_diabetes, color = "red"), formula = y ~ x, method = "lm") +
labs(title="Diabetes vs daily calories from animal protein (without outliers)", x="Total calories from animal protein per day", y="Diabetes prevalence") +
scale_color_manual(labels = c("Men", "Women"), values = c("blue", "red")) +
scale_y_continuous(labels = scales::percent)
# Diabetes vs calories from plant protein
ggplot(data = GDP_diabetes_cal2) +
geom_point(mapping = aes(x = cal_prot_plant, y = prop_men_diabetes, color = "blue")) +
geom_smooth(mapping = aes(x = cal_prot_plant, y = prop_men_diabetes, color = "blue"), formula = y ~ x, method = "lm") +
geom_point(mapping = aes(x = cal_prot_plant, y = prop_women_diabetes, color = "red")) +
geom_smooth(mapping = aes(x = cal_prot_plant, y = prop_women_diabetes, color = "red"), formula = y ~ x, method = "lm") +
labs(title="Diabetes vs daily calories from plant protein (without outliers)", x="Total calories from plant protein per day", y="Diabetes prevalence") +
scale_color_manual(labels = c("Men", "Women"), values = c("blue", "red")) +
scale_y_continuous(labels = scales::percent)
# Diabetes vs calories from carbohydrates
ggplot(data = GDP_diabetes_cal2) +
geom_point(mapping = aes(x = cal_carbs, y = prop_men_diabetes, color = "blue")) +
geom_smooth(mapping = aes(x = cal_carbs, y = prop_men_diabetes, color = "blue"), formula = y ~ x, method = "lm") +
geom_point(mapping = aes(x = cal_carbs, y = prop_women_diabetes, color = "red")) +
geom_smooth(mapping = aes(x = cal_carbs, y = prop_women_diabetes, color = "red"), formula = y ~ x, method = "lm") +
labs(title="Diabetes vs daily calories from carbohydrates (without outliers)", x="Total calories from carbohydrates per day", y="Diabetes prevalence") +
scale_color_manual(labels = c("Men", "Women"), values = c("blue", "red")) +
scale_y_continuous(labels = scales::percent)
# Diabetes vs calories from fat
ggplot(data = GDP_diabetes_cal2) +
geom_point(mapping = aes(x = cal_fat, y = prop_men_diabetes, color = "blue")) +
geom_smooth(mapping = aes(x = cal_fat, y = prop_men_diabetes, color = "blue"), formula = y ~ x, method = "lm") +
geom_point(mapping = aes(x = cal_fat, y = prop_women_diabetes, color = "red")) +
geom_smooth(mapping = aes(x = cal_fat, y = prop_women_diabetes, color = "red"), formula = y ~ x, method = "lm") +
labs(title="Diabetes vs daily calories from fat (without outliers)", x="Total calories from fat per day", y="Diabetes prevalence") +
scale_color_manual(labels = c("Men", "Women"), values = c("blue", "red")) +
scale_y_continuous(labels = scales::percent)
#with outliers
cor(GDP_diabetes_cal$avg_gdp, GDP_diabetes_cal$prop_women_diabetes)
cor(GDP_diabetes_cal$avg_gdp, GDP_diabetes_cal$prop_men_diabetes)
lm_gdp_diabetes_women <- lm(GDP_diabetes_cal$avg_gdp ~ GDP_diabetes_cal$prop_women_diabetes)
lm_gdp_diabetes_men <- lm(GDP_diabetes_cal$avg_gdp ~ GDP_diabetes_cal$prop_men_diabetes)
kable(prettify(summary(lm_gdp_diabetes_women)))
kable(prettify(summary(lm_gdp_diabetes_men)))
#without outliers
cor(GDP_diabetes_cal2$avg_gdp, GDP_diabetes_cal2$prop_women_diabetes)
cor(GDP_diabetes_cal2$avg_gdp, GDP_diabetes_cal2$prop_men_diabetes)
lm_gdp_diabetes_women2 <- lm(GDP_diabetes_cal2$avg_gdp ~ GDP_diabetes_cal2$prop_women_diabetes)
lm_gdp_diabetes_men2 <- lm(GDP_diabetes_cal2$avg_gdp ~ GDP_diabetes_cal2$prop_men_diabetes)
kable(prettify(summary(lm_gdp_diabetes_women2)))
kable(prettify(summary(lm_gdp_diabetes_men2)))
data_1 <- GDP_diabetes_cal[,-(1:2),drop=FALSE] #-> introduce the proportions later on ?
rownames(data_1) <- c("AUT", "BEL", "BGR", "HRV", "CYP", "CZE", "DNK", "EST", "FIN", "FRA", "DEU","GRC", "HUN", "IRL", "ITA", "LVA", "LTU", "LUX", "MLT", "NLD", "POL", "PRT", "ROU", "SVK", "SVN", "ESP", "SWE", "GBR", "CHE")
fviz_nbclust(data_1, kmeans, method = "wss") +
geom_vline(xintercept = 3, linetype = 2) + # add line for better visualisation
labs(subtitle = "Elbow method") # add subtitle
set.seed(123)
model_cluster <- kmeans(data_1, centers = 3, nstart = 10)
Data_cluster <- data.frame(data_1,
cluster = as.factor(model_cluster$cluster))
countries_cluster_1 <- filter(Data_cluster, cluster == "1")
countries_cluster_2 <- filter(Data_cluster, cluster == "2")
countries_cluster_3 <- filter(Data_cluster, cluster == "3")
kable(countries_cluster_1)
kable(countries_cluster_2)
kable(countries_cluster_3)
res_kmeans <- cluster_analysis(data_1, n=3, method = "kmeans",iterations = 20)
predict(res_kmeans)
plot(res_kmeans)
res_kmeans <- cluster_analysis(data_1, n=3, method = "kmeans",iterations = 20)
#predict(res_kmeans)
plot(res_kmeans)
set.seed(123)
model_cluster <- kmeans(data_1, centers = 3, nstart = 10)
Data_cluster <- data.frame(data_1,
cluster = as.factor(model_cluster$cluster))
countries_cluster_1 <- filter(Data_cluster, cluster == "1")
countries_cluster_2 <- filter(Data_cluster, cluster == "2")
countries_cluster_3 <- filter(Data_cluster, cluster == "3")
kable(countries_cluster_1)
kable(countries_cluster_2)
kable(countries_cluster_3)
res_kmeans <- cluster_analysis(data_1, n=3, method = "kmeans",iterations = 20)
#predict(res_kmeans)
plot(res_kmeans)
set.seed(123)
model_cluster <- kmeans(data_1, centers = 3, nstart = 10)
Data_cluster <- data.frame(data_1,
cluster = as.factor(model_cluster$cluster))
countries_cluster_1 <- filter(Data_cluster, cluster == "1")
countries_cluster_2 <- filter(Data_cluster, cluster == "2")
countries_cluster_3 <- filter(Data_cluster, cluster == "3")
kable(countries_cluster_1)
kable(countries_cluster_2)
kable(countries_cluster_3)
res_kmeans <- cluster_analysis(data_1, n=3, method = "kmeans",iterations = 20)
predict(res_kmeans)
plot(res_kmeans)
cor(countries_cluster_1$avg_gdp, countries_cluster_1$prop_women_diabetes)
cor(countries_cluster_1$avg_gdp, countries_cluster_1$prop_men_diabetes)
cor(countries_cluster_2$avg_gdp, countries_cluster_2$prop_women_diabetes)
cor(countries_cluster_2$avg_gdp, countries_cluster_2$prop_men_diabetes)
cor(countries_cluster_3$avg_gdp, countries_cluster_3$prop_women_diabetes)
cor(countries_cluster_3$avg_gdp, countries_cluster_3$prop_men_diabetes)
lm_gdp_diabetes_women_clust1 <- lm(countries_cluster_1$avg_gdp ~ countries_cluster_1$prop_women_diabetes)
lm_gdp_diabetes_men_clust1 <- lm(countries_cluster_1$avg_gdp ~ countries_cluster_1$prop_men_diabetes)
lm_gdp_diabetes_women_clust2 <- lm(countries_cluster_2$avg_gdp ~ countries_cluster_2$prop_women_diabetes)
lm_gdp_diabetes_men_clust2 <- lm(countries_cluster_2$avg_gdp ~ countries_cluster_2$prop_men_diabetes)
lm_gdp_diabetes_women_clust3 <- lm(countries_cluster_3$avg_gdp ~ countries_cluster_3$prop_women_diabetes)
lm_gdp_diabetes_men_clust3 <- lm(countries_cluster_3$avg_gdp ~ countries_cluster_3$prop_men_diabetes)
kable(prettify(summary(lm_gdp_diabetes_women_clust1)))
kable(prettify(summary(lm_gdp_diabetes_men_clust1)))
kable(prettify(summary(lm_gdp_diabetes_women_clust2)))
kable(prettify(summary(lm_gdp_diabetes_men_clust2)))
kable(prettify(summary(lm_gdp_diabetes_women_clust3)))
kable(prettify(summary(lm_gdp_diabetes_men_clust3)))
cor(GDP_diabetes_cal$avg_gdp,GDP_diabetes_cal$total_consumption)
lm_gdp_total_cal <- lm(GDP_diabetes_cal$avg_gdp ~ GDP_diabetes_cal$total_consumption)
kable(prettify(summary(lm_gdp_total_cal)))
View(Data_cluster)
set.seed(123)
model_cluster <- kmeans(data_1, centers = 3, nstart = 10)
Data_cluster <- data.frame(data_1, cluster = as.factor(model_cluster$cluster))
countries_cluster_1 <- filter(Data_cluster, cluster == "1")
countries_cluster_2 <- filter(Data_cluster, cluster == "2")
countries_cluster_3 <- filter(Data_cluster, cluster == "3")
kable(countries_cluster_1)
kable(countries_cluster_2)
kable(countries_cluster_3)
res_kmeans <- cluster_analysis(data_1, n=3, method = "kmeans",iterations = 20)
predict(res_kmeans)
plot(res_kmeans) # --> result is not correct...
plot(countries_cluster_1)
plot(countries_cluster_2)
plot(countries_cluster_3)
